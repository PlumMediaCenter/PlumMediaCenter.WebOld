angular.module('app', ['ui.router', 'ui.bootstrap'])
        .run(['$rootScope', 'enums', function($rootScope, enums) {
                $rootScope.enums = enums;
            }]);

fetchConstants().then(bootstrapApplication);


/**
 * Load constants asynchronously BEFORE bootstrapping the application
 * @returns {unresolved}
 */
function fetchConstants() {
    var injector = angular.injector(["ng"])
    var $http = injector.get("$http");
    var $q = injector.get('$q');

    var promises = [
        $q(function(resolve, reject) {
            $http.get('api/GetEnumerations.php').then(function(result) {
                angular.module('app').constant("enums", result.data);
                resolve();
            }, reject);
        })
    ];

    return $q.all(promises);
}

function bootstrapApplication() {
    angular.element(document).ready(function() {
        angular.bootstrap(document, ["app"]);
    });
}
angular.module('app')
        .config(['$stateProvider', '$urlRouterProvider',
            function($stateProvider, $urlRouterProvider) {
                $urlRouterProvider.otherwise('/home');

                $stateProvider
                        .state('home', {
                            url: '/home',
                            templateUrl: 'app/partials/home.html',
                            controller: 'HomeController',
                            controllerAs: 'vm'
                        })
                        .state('admin', {
                            url: '/admin',
                            templateUrl: 'app/partials/admin.html',
                            controller: 'AdminController',
                            controllerAs: 'vm'
                        })
                        .state('videoInfo', {
                            url: '/videoInfo/{videoId:int}',
                            templateUrl: 'app/partials/videoInfo.html',
                            controller: 'VideoInfoController',
                            controllerAs: 'vm'
                        })
                        .state('videoSources', {
                            url: '/videoSources',
                            templateUrl: 'app/partials/videoSources.html',
                            controller: 'VideoSourcesController',
                            controllerAs: 'vm'
                        })
                        .state('editVideoSource', {
                            url: '/editVideoSource/{id:int}',
                            parent: 'videoSources',
                            templateUrl: 'app/partials/editVideoSource.html',
                            controller: 'EditVideoSourceController',
                            controllerAs: 'vm'
                        })
            }])

        .run(['$rootScope', '$state', '$stateParams', function($rootScope, $state, $stateParams) {
                $rootScope.$state = $state;
                $rootScope.$stateParams = $stateParams;
            }])
angular.module('app').controller('AdminController', ['globals', 'api', 'notify',
    function(globals, api, notify) {
        var vm = this;
        vm.generatingLibrary = false;
        globals.title = 'Admin';

        vm.generateLibrary = function() {
            var n = notify('Generating library', 'info');
            vm.generatingLibrary = true;
            console.log(n);
            api.generateLibrary().then(function() {
                notify('Library has been generated', 'success');
            }).catch(function(err) {
                notify('There was an error generating the library: "' + err.message + '"', 'danger');
            }).finally(function(){
                vm.generatingLibrary = false;
            });
        }



    }]);
angular.module('app').controller('BaseController', ['globals',function(globals) {
        var vm = this;
        vm.globals = globals;
        
    }]);
angular.module('app').controller('EditVideoSourceController', ['$scope', 'globals', 'VideoSource', '$stateParams','enums',
    function($scope, globals, VideoSource, $stateParams, enums) {
        globals.title = 'Edit Video Source';
        var vm = this;
        vm.reset = reset;
        vm.save = save;
        vm.videoSource = {
            securityType: enums.securityType.public
        };
        vm.originalVideoSource = angular.copy( vm.videoSource);
        //if an id was provided, go look up the settings for that videoSource
        if ($stateParams.id && $stateParams.id > 0) {
            vm.loading = true;
            VideoSource.getById($stateParams.id).then(function(videoSource) {
                vm.videoSource = videoSource;
                vm.originalVideoSource = angular.copy(videoSource);
            }).finally(function() {
                vm.loading = false;
            });
        }

        function reset() {
            vm.videoSource = vm.originalVideoSource;
            vm.form.setPristine(true);
        }

        function save() {
            VideoSource.save(vm.videoSource).then(function(videoSource) {
                vm.videoSource = videoSource;
                 vm.form.setPristine(true);
            }, function() {
                //handle the error

            });
        }

    }]);
angular.module('app').controller('HomeController', ['globals', 'Video', function(globals, Video) {
        var vm = this;
        globals.title = 'Home';
        
        Video.getAll().then(function(videos){
            vm.videos = videos;
        });
    }]);
angular.module('app').controller('VideoInfoController', ['globals', 'Video', '$stateParams', function(globals, Video, $stateParams) {
        var vm = this;
        globals.title = 'VideoInfo';

        //load the video by id
        Video.getById($stateParams.videoId).then(function(video) {
            vm.video = video;

            if (vm.video.mediaType === 'TvShow') {
                Video.getEpisodes(vm.video.videoId).then(function(episodes) {
                    vm.episodes = episodes;
                });
                Video.getNextEpisode(vm.video.videoId).then(function(episode) {
                    vm.nextEpisode = episode;
                });
            }
        })
    }]);
angular.module('app').controller('VideoSourcesController', ['globals', 'VideoSource', 'notify',
    function(globals, VideoSource, notify) {
        var vm = this;
        vm.editIsVisible = false;

        globals.title = 'Video Sources';

        VideoSource.getAll().then(function(videoSources) {
            vm.videoSources = videoSources;
        });


    }]);
angular.module('app').directive('videoTile', [function() {
        return {
            restrict: 'E',
            controllerAs: 'vm',
            controller: [Controller],
            bindToController: true,
            scope: {
                video: '='
            },
            templateUrl: 'app/directives/videoTileDirective.html'
        }

        function Controller() {
            
        }
    }]);
angular.module('app').service('Video', ['$http', '$q', function($http, $q) {
        function Video() {

        }

        Video.getAll = function() {
            return $q(function(resolve, reject) {
                $http.get('api/GetLibrary.php').success(function(data) {
                    resolve(data);
                });
            });
        };

        Video.getById = function(id) {
            var deferred = $q.defer();
            $http.get('api/GetVideo.php?videoId=' + id).success(function(data) {
                deferred.resolve(data);
            }).error(function() {
                deferred.reject(data);
            });
            return deferred.promise;
        };

        Video.getEpisodes = function(showId) {
            var deferred = $q.defer();
            $http.get('api/GetTvEpisodes.php?videoId=' + showId).success(function(data) {
                deferred.resolve(data);
            }).error(function() {
                deferred.reject(data);
            });
            return deferred.promise;
        };
        
        Video.getNextEpisode = function(showId) {
            var deferred = $q.defer();
            $http.get('api/GetNextEpisode.php?videoId=' + showId).success(function(data) {
                deferred.resolve(data);
            }).error(function() {
                deferred.reject(data);
            });
            return deferred.promise;
        };
        
        
        return Video;
    }]);
angular.module('app').service('VideoSource', ['$http', '$q', function($http, $q) {
        function VideoSource() {

        }

        VideoSource.getAll = function() {
            var deferred = $q.defer();
            $http.get('api/GetVideoSources.php').success(function(data) {
                deferred.resolve(data);
            }).error(function() {
                deferred.reject();
            });
            return deferred.promise;
        };

        VideoSource.getById = function(id) {
            var deferred = $q.defer();
            $http.get('api/GetVideoSourceById.php?id=' + id).success(function(data) {
                deferred.resolve(data);
            }).error(function() {
                deferred.reject();
            });
            return deferred.promise;
        };

        VideoSource.save = function(videoSource) {
            return $q(function(resolve, reject) {
                $http.post('api/PostVideoSource.php', videoSource).then(function(result) {
                    resolve(result.data);
                }, reject);
            });
        };

        return VideoSource;
    }]);
angular.module('app').service('api', ['$q', '$http', function($q, $http) {
        return {
            generateLibrary: generateLibrary
        };

        function generateLibrary() {
            return $q(function(resolve, reject) {
                $http.get('api/GenerateLibrary.php')
                        .success(function(result) {
                            if (result.success) {
                                resolve();
                            } else {
                                reject();
                            }
                        })
                        .error(function() {
                            reject();
                        })

            });
        }
    }]);
angular.module('app').service('globals', [function() {
        return {
            pageTitle: 'PlumMediaCenter'
        };
    }]);
angular.module('app').service('notify', function() {
    return notify;
});

 function notify(message, type) {
        type = type ? type : 'warning';
        //if danger was provided, convert to error
        type = type === 'danger' ? 'error' : type;
        
        return new PNotify({
            title: '',
            text: message,
            styling: 'bootstrap3',
            type: type
        });
    }
angular.module('app').directive('pathExistsValidator', function($http, $q) {
    return {
        require: 'ngModel',
        link: function(scope, element, attrs, ngModel) {
            ngModel.$asyncValidators.pathExists = function(modelValue, viewValue) {
                var value = modelValue || viewValue;
                return $http.get('api/GetPathExistsOnServer.php', {params: {path: value}}).then(
                        function(response) {
                            if (!response.data.exists === true) {
                                return $q.reject(response.data.errorMessage);
                            }
                            return true;
                        }
                );
            };
        }
    };
});
angular.module('app').directive('urlExistsValidator', function($http, $q) {
    return {
        require: 'ngModel',
        link: function(scope, element, attrs, ngModel) {
            ngModel.$asyncValidators.urlExists = function(modelValue, viewValue) {
                var value = modelValue || viewValue;
                return $http.get('api/GetUrlExists.php', {params: {url: value}}).then(
                        function(response) {
                            if (!response.data.exists === true) {
                                return $q.reject(response.data.errorMessage);
                            }
                            return true;
                        }
                );
            };
        }
    };
});