{"version":3,"sources":["app.js","routes.js","controllers/AddNewMediaItemController.js","controllers/AdminController.js","controllers/BaseController.js","controllers/EditVideoSourceController.js","controllers/FetchByTitleController.js","controllers/HomeController.js","controllers/MetadataFetcherController.js","controllers/NavbarController.js","controllers/PlayController.js","controllers/SearchController.js","controllers/VideoInfoController.js","controllers/VideoSourcesController.js","directives/categoryScrollerCollectionDirective.js","directives/categoryScrollerDirective.js","directives/confirmDirective.js","directives/episodeDirective.js","directives/focusDirective.js","directives/jwplayerDirective.js","directives/loadMessageDirective.js","directives/videoTileDirective.js","validators/pathExistsValidator.js","validators/urlExistsValidator.js","services/adminService.js","services/apiService.js","services/debounceFactory.js","services/globalsService.js","services/libs.js","services/notifyService.js","services/refreshImageService.js","services/uniqueIdService.js","services/util.js","services/VideoService.js","services/VideoSourceService.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACztGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnvMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChnPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.min.js","sourcesContent":["angular.module('app', ['ui.router', 'ui.bootstrap', 'infinite-scroll', 'ngTouch', 'ngAnimate'])\r\n        .run(['$rootScope', 'enums', 'globals', function($rootScope, enums, globals) {\r\n                $rootScope.enums = enums;\r\n                $rootScope.globals = globals;\r\n            }]);\r\n\r\nfetchConstants().then(bootstrapApplication);\r\n\r\n\r\n/**\r\n * Load constants asynchronously BEFORE bootstrapping the application\r\n * @returns {unresolved}\r\n */\r\nfunction fetchConstants() {\r\n    var injector = angular.injector([\"ng\"])\r\n    var $http = injector.get(\"$http\");\r\n    var $q = injector.get('$q');\r\n\r\n    var promises = [\r\n        $q(function(resolve, reject) {\r\n            $http.get('api/GetEnumerations.php').then(function(result) {\r\n                angular.module('app').constant(\"enums\", result.data);\r\n                resolve();\r\n            }, reject);\r\n        })\r\n    ];\r\n\r\n    return $q.all(promises);\r\n}\r\n\r\nfunction bootstrapApplication() {\r\n    angular.element(document).ready(function() {\r\n        angular.bootstrap(document, [\"app\"]);\r\n    });\r\n}","angular.module('app')\r\n        .config(['$stateProvider', '$urlRouterProvider',\r\n            function($stateProvider, $urlRouterProvider) {\r\n                $urlRouterProvider.otherwise('/home');\r\n\r\n                $stateProvider\r\n                   .state('addNewMediaItem', {\r\n                            url: '/addNewMediaItem',\r\n                            templateUrl: 'addNewMediaItem.html',\r\n                            controller: 'AddNewMediaItemController',\r\n                            controllerAs: 'vm'\r\n                        }) \r\n                        .state('home', {\r\n                            url: '/home',\r\n                            templateUrl: 'home.html',\r\n                            controller: 'HomeController',\r\n                            controllerAs: 'vm'\r\n                        })\r\n                        .state('admin', {\r\n                            url: '/admin',\r\n                            templateUrl: 'admin.html',\r\n                            controller: 'AdminController',\r\n                            controllerAs: 'vm'\r\n                        })\r\n                        .state('videoInfo', {\r\n                            url: '/videoInfo/{videoId:int}',\r\n                            templateUrl: 'videoInfo.html',\r\n                            controller: 'VideoInfoController',\r\n                            controllerAs: 'vm'\r\n                        })\r\n                        .state('videoSources', {\r\n                            url: '/videoSources',\r\n                            templateUrl: 'videoSources.html',\r\n                            controller: 'VideoSourcesController',\r\n                            controllerAs: 'vm'\r\n                        })\r\n                        .state('editVideoSource', {\r\n                            url: '/editVideoSource/{id:int}',\r\n                            parent: 'videoSources',\r\n                            templateUrl: 'editVideoSource.html',\r\n                            controller: 'EditVideoSourceController',\r\n                            controllerAs: 'vm'\r\n                        })\r\n                        .state('play', {\r\n                            url: '/play/{videoId:int}?{showVideoId:int}',\r\n                            templateUrl: 'play.html',\r\n                            controller: 'PlayController',\r\n                            controllerAs: 'vm'\r\n                        })\r\n                        .state('search', {\r\n                            url: '/search?q',\r\n                            templateUrl: 'search.html',\r\n                            controller: 'SearchController',\r\n                            controllerAs: 'vm'\r\n                        })\r\n                        .state('metadataFetcher', {\r\n                            url: '/metadataFetcher/{videoId:int}',\r\n                            templateUrl: 'metadataFetcher.html',\r\n                            controller: 'MetadataFetcherController',\r\n                            controllerAs: 'vm'\r\n                        }) \r\n            }])\r\n\r\n        .run(['$rootScope', '$state', '$stateParams', function($rootScope, $state, $stateParams) {\r\n                $rootScope.$state = $state;\r\n                $rootScope.$stateParams = $stateParams;\r\n            }])","angular.module('app').controller('AddNewMediaItemController', ['Video', 'globals', 'VideoSource', 'notify', function (Video, globals, VideoSource, notify) {\r\n        globals.title = 'Add new media item';\r\n\r\n        var vm = angular.extend(this, {\r\n            //properties\r\n            videoSources: [],\r\n            newMediaItem: {},\r\n            //api\r\n            addNewMediaItem: addNewMediaItem\r\n        });\r\n\r\n        VideoSource.getAll().then(function (videoSources) {\r\n            vm.videoSources = videoSources;\r\n        });\r\n\r\n        function addNewMediaItem() {\r\n            Video.addNewMediaItem(vm.newMediaItem.videoSourceId, vm.newMediaItem.path).then(function (result) {\r\n                notify('New media items were successfully added', 'success');\r\n            }, function (error) {\r\n                notify(error.message, 'danger');\r\n            });\r\n        }\r\n    }]);","angular.module('app').controller('AdminController', ['$timeout', '$window', 'globals', 'api', 'notify', 'Video', 'admin',\r\n    function($timeout, $window, globals, api, notify, Video, admin) {\r\n        globals.title = 'Admin';\r\n\r\n        var vm = angular.extend(this, {\r\n            //properties\r\n            serverVersionNumber: undefined,\r\n            //api\r\n            fetchMissingMetadata: fetchMissingMetadata,\r\n            generateLibrary: generateLibrary,\r\n            updateApplication: updateApplication\r\n        });\r\n\r\n\r\n        getVideoCounts();\r\n        getServerVersionNumber();\r\n\r\n        function generateLibrary() {\r\n            var n = notify('Generating library', 'info');\r\n            globals.generateLibraryIsPending = true;\r\n            api.generateLibrary().then(function() {\r\n                notify('Library has been generated', 'success');\r\n            }).catch(function(err) {\r\n                notify('There was an error generating the library: \"' + err.message + '\"', 'danger');\r\n            }).finally(function() {\r\n                globals.generateLibraryIsPending = false;\r\n                getVideoCounts();\r\n            });\r\n        }\r\n\r\n        function getServerVersionNumber() {\r\n            admin.getServerVersionNumber().then(function(version) {\r\n                vm.serverVersionNumber = version;\r\n            });\r\n        }\r\n        function getVideoCounts() {\r\n            Video.getCounts().then(function(videoCounts) {\r\n                vm.videoCounts = videoCounts;\r\n            });\r\n        }\r\n\r\n        function fetchMissingMetadata() {\r\n            globals.fetchMissingMetadataIsPending = true;\r\n            notify('Fetching missing metadata', 'info');\r\n            Video.fetchMissingMetadata().then(function() {\r\n                notify('Finished fetching missing metata for videos', 'success');\r\n            }, function() {\r\n                notify('There was an error fetching missing metadata', 'error');\r\n            }).finally(function() {\r\n                globals.fetchMissingMetadataIsPending = false;\r\n            });\r\n        }\r\n\r\n        function updateApplication() {\r\n            globals.checkForUpdatesIsPending = true;\r\n            notify('Checking for updates. Please wait until this operation has completed', 'info');\r\n            admin.updateApplication().then(function(result) {\r\n                if (result.updateWasApplied) {\r\n                    notify('Application has been updated. Reloading page.', 'success');\r\n                    $timeout(function() {\r\n                        $window.location.reload();\r\n                    }, 4000);\r\n                } else {\r\n                    notify('No updates were found', 'success');\r\n                }\r\n            }, function() {\r\n                notify('Unable to check and install updates', 'error');\r\n            }).finally(function() {\r\n                globals.checkForUpdatesIsPending = false;\r\n            });\r\n        }\r\n    }]);","angular.module('app').controller('BaseController', ['globals',function(globals) {\r\n        var vm = angular.extend(this, {\r\n            globals: globals\r\n        });\r\n        \r\n    }]);","angular.module('app').controller('EditVideoSourceController', [\r\n    '$scope', 'globals', 'VideoSource', '$state', '$stateParams', 'enums',\r\n    function($scope, globals, VideoSource, $state, $stateParams, enums) {\r\n        var vm = angular.extend(this, {\r\n            isLoading: false,\r\n            isSaving: false,\r\n            //properties\r\n            originalVideoSource: undefined,\r\n            videoSource: {\r\n                securityType: enums.securityType.public,\r\n            },\r\n            //api\r\n            reset: reset,\r\n            save: save,\r\n            sayHi: function() {\r\n                alert('hi');\r\n            }\r\n        });\r\n\r\n        globals.title = 'Edit Video Source';\r\n        vm.originalVideoSource = angular.copy(vm.videoSource);\r\n        loadVideoSource();\r\n\r\n        function loadVideoSource() {\r\n            //if an id was provided, go look up the settings for that videoSource\r\n            if ($stateParams.id && $stateParams.id > 0) {\r\n                vm.isLoading = true;\r\n                VideoSource.getById($stateParams.id).then(function(videoSource) {\r\n                    vm.videoSource = videoSource;\r\n                    vm.originalVideoSource = angular.copy(videoSource);\r\n                }).finally(function() {\r\n                    vm.isLoading = false;\r\n                });\r\n            }\r\n        }\r\n\r\n        function reset() {\r\n            vm.videoSource = vm.originalVideoSource;\r\n            vm.form.setPristine(true);\r\n        }\r\n\r\n        function save() {\r\n            vm.isSaving = true;\r\n            VideoSource.save(vm.videoSource).then(function(videoSource) {\r\n                vm.isSaving = false;\r\n                loadVideoSource();\r\n                notify('Saved video source', 'success');\r\n                $state.go('videoSources', {}, {reload: true});\r\n            }, function() {\r\n                //handle the error\r\n                vm.isSaving = false;\r\n            });\r\n        }\r\n    }]);","angular.module('app').controller('FetchByTitleController', ['$stateParams',\r\n    function($stateParams) {\r\n        var vm = angular.extend(this, {\r\n            //properties\r\n            title: undefined\r\n                    //api\r\n\r\n        });\r\n\r\n        vm.title = $stateParams.title;\r\n\r\n    }]);","angular.module('app').controller('HomeController', ['globals', 'Video', function(globals, Video) {\r\n        var vm = angular.extend(this, {\r\n//            allVideos: [],\r\n//            currentlyLoadedVideos: [],\r\n            //api\r\n//            loadMore: loadMore\r\n        });\r\n//        globals.title = 'Home';\r\n//\r\n//        Video.getAll().then(function(videos) {\r\n//            vm.allVideos = videos;\r\n//        });\r\n//\r\n//        function loadMore() {\r\n//            var numberToLoad = globals.infiniteScrollPageSize;\r\n//            var beginIndex = vm.currentlyLoadedVideos.length;\r\n//            var endIndex = beginIndex + numberToLoad;\r\n//            //if the end index is larger than the list of all videos, change the end index to the length of the list of all videos\r\n//            endIndex = endIndex > vm.allVideos.length ? vm.allVideos.length : endIndex;\r\n//\r\n//            for (var i = beginIndex; i < endIndex; i++) {\r\n//                vm.currentlyLoadedVideos.push(vm.allVideos[i]);\r\n//            }\r\n//        }\r\n\r\n    }]);","angular.module('app').controller('MetadataFetcherController', ['$scope', '$q', 'globals', 'refreshImage', 'Video', '$state', '$stateParams', 'notify', 'enums',\r\n    function($scope, $q, globals, refreshImage, Video, $state, $stateParams, notify, enums) {\r\n        globals.title = 'Fetch Metadata';\r\n        var vm = angular.extend(this, {\r\n            searchByOptions: {\r\n                onlineVideoId: 'onlineVideoId',\r\n                title: 'title'\r\n            },\r\n            videoId: $stateParams.videoId,\r\n            searchBy: 'onlineVideoId',\r\n            isSearching: false,\r\n            metadataIsBeingFetched: false,\r\n            textboxLabel: undefined,\r\n            //this is the value (title, onlineVideoId) to use to search for the metadata\r\n            searchValue: undefined,\r\n            searchResults: undefined,\r\n            video: {},\r\n            //api\r\n            search: search,\r\n            calculateTextboxLabel: calculateTextboxLabel,\r\n            fetchMetadataByOnlineVideoId: fetchMetadataByOnlineVideoId\r\n        });\r\n\r\n        $scope.$watch('vm.searchBy', searchByChanged);\r\n\r\n        $scope.$watch('vm.video', vm.calculateTextboxLabel);\r\n\r\n        function searchByChanged() {\r\n            vm.calculateTextboxLabel();\r\n            if (vm.searchBy === vm.searchByOptions.title) {\r\n                vm.searchValue = vm.video.title;\r\n            } else {\r\n                vm.searchValue = '';\r\n            }\r\n        }\r\n\r\n        function calculateTextboxLabel() {\r\n            vm.textboxLabel = undefined;\r\n\r\n            if (!vm.video) {\r\n                return;\r\n            }\r\n            if (vm.searchBy === vm.searchByOptions.title) {\r\n                vm.textboxLabel = 'Title';\r\n            } else {\r\n                vm.textboxLabel = vm.video.mediaType === enums.mediaTypeMovie ? 'TMDB ID' : 'TVDB ID';\r\n            }\r\n        }\r\n\r\n        //load the video\r\n        Video.getById(vm.videoId).then(function(video) {\r\n            angular.extend(vm.video, video);\r\n            searchByChanged()\r\n        });\r\n\r\n        Video.getPathInfo(vm.videoId).then(function(video) {\r\n            angular.extend(vm.video, video);\r\n        });\r\n\r\n        function search() {\r\n            vm.isSearching = true;\r\n            var promise;\r\n            if (vm.searchBy === vm.searchByOptions.title) {\r\n                promise = Video.getMetadataSearchResultsByTitle(vm.video.mediaType, vm.searchValue);\r\n            } else {\r\n                promise = Video.getMetadataSearchResultsByOnlineVideoId(vm.video.mediaType, vm.searchValue);\r\n            }\r\n            promise.then(function(searchResults) {\r\n                vm.metadataResults = searchResults;\r\n                vm.isSearching = false;\r\n            });\r\n        }\r\n\r\n        function fetchMetadataByOnlineVideoId(onlineVideoId) {\r\n            vm.metadataIsBeingFetched = true;\r\n            Video.fetchMetadata(vm.video.videoId, onlineVideoId).then(function() {\r\n                return Video.getById(vm.video.videoId);\r\n            }).then(function(video) {\r\n                //refresh the posters so that when we go back to videoInfo, the poster cache has been cleared\r\n                return refreshImage(video.sdPosterUrl).then(function() {\r\n                    return refreshImage(video.hdPosterUrl);\r\n                }).then(function(){\r\n                    //there was an issue getting the browser to refresh the cached images. try reloading the page (after we have \r\n                    //navigated to the videoInfo page)\r\n                    setTimeout(function(){\r\n                        window.location.reload();\r\n                    }, 200);\r\n                    return undefined;\r\n                });\r\n            }).then(function() {\r\n                vm.metadataResults = undefined;\r\n                vm.metadataIsBeingFetched = false;\r\n\r\n                notify('Updated video with selected metadata', 'success');\r\n                $state.go('videoInfo', {videoId: vm.videoId});\r\n            })['catch'](function(err) {\r\n                vm.metadataIsBeingFetched = false;\r\n                notify('There was an error fetching metadata for the video you selected: ' + err, 'error');\r\n            })\r\n        }\r\n\r\n\r\n    }]);","angular.module('app').controller('NavbarController', ['$state', function($state) {\r\n        var vm = angular.extend(this, {\r\n            searchTerm: undefined,\r\n            navbarIsOpen: false,\r\n            //api\r\n            search: search,\r\n            hideNavbar: hideNavbar,\r\n            toggleNavbar: toggleNavbar\r\n        });\r\n\r\n        function search() {\r\n            if (vm.searchTerm && vm.searchTerm.trim().length > 0) {\r\n                $state.go('search', {q: vm.searchTerm});\r\n                vm.searchTerm = undefined;\r\n                hideNavbar();\r\n            }\r\n        }\r\n\r\n        function showNavbar() {\r\n            vm.navbarIsOpen = true;\r\n        }\r\n\r\n        function hideNavbar() {\r\n            vm.navbarIsOpen = false;\r\n        }\r\n\r\n        function toggleNavbar() {\r\n            vm.navbarIsOpen ? hideNavbar() : showNavbar();\r\n        }\r\n\r\n    }]);","angular.module('app').controller('PlayController', ['$scope', 'globals', '$stateParams', 'notify',\r\n    function($scope, globals, $stateParams, notify) {\r\n        globals.title = 'Play';\r\n        globals.hideNavbar = true;\r\n        \r\n        var vm = angular.extend(this, {\r\n            videoId: $stateParams.videoId,\r\n            showVideoId: $stateParams.showVideoId\r\n        });\r\n\r\n        $scope.$on(\"$destroy\", function() {\r\n           globals.hideNavbar = false;\r\n        });\r\n    }]);","angular.module('app').controller('SearchController', ['globals', 'Video', '$stateParams', function(globals, Video, $stateParams) {\r\n        var vm = angular.extend(this, {\r\n            allVideos: null,\r\n            currentlyLoadedVideos: [],\r\n            searchTerm: $stateParams.q,\r\n            //api\r\n            loadMore: loadMore\r\n        });\r\n\r\n        globals.title = 'Home';\r\n        var searchTerm = $stateParams.q;\r\n\r\n        Video.search(searchTerm).then(function(videos) {\r\n            vm.allVideos = videos;\r\n        });\r\n\r\n\r\n        function loadMore() {\r\n            var numberToLoad = globals.infiniteScrollPageSize;\r\n            var beginIndex = vm.currentlyLoadedVideos.length;\r\n            var endIndex = beginIndex + numberToLoad;\r\n            //if the end index is larger than the list of all videos, change the end index to the length of the list of all videos\r\n            endIndex = endIndex > vm.allVideos.length ? vm.allVideos.length : endIndex;\r\n\r\n            for (var i = beginIndex; i < endIndex; i++) {\r\n                var video = vm.allVideos[i];\r\n                vm.currentlyLoadedVideos.push(video);\r\n            }\r\n        }\r\n\r\n    }]);","angular.module('app').controller('VideoInfoController', ['$scope', 'globals', 'Video', '$state', '$stateParams', 'enums',\r\n    function($scope, globals, Video,$state,  $stateParams, enums) {\r\n        var vm = angular.extend(this, {\r\n            progressPercent: 0,\r\n            preventCache: $stateParams.preventCache,\r\n            episodes: undefined,\r\n            videoId: $stateParams.videoId,\r\n            //api\r\n            getProgressPercentType: getProgressPercentType,\r\n            navigateToShow: navigateToShow\r\n        });\r\n        globals.title = 'VideoInfo';\r\n\r\n        $scope.$watch('vm.episodes', fetchAllEpisodePercentWatched);\r\n\r\n        //load the video by id\r\n        Video.getById(vm.videoId).then(function(video) {\r\n            vm.video = video;\r\n\r\n            if (vm.video.mediaType === enums.mediaType.show) {\r\n                //get all of the episodes for this show\r\n                Video.getEpisodes(vm.video.videoId).then(function(episodes) {\r\n                    vm.episodes = episodes;\r\n                    //find the next episode that should be watched\r\n                }).then(function() {\r\n                    return Video.getNextEpisode(vm.video.videoId);\r\n                    //select the episode in our local list of episodes that matches the next episode\r\n                }).then(function(nextEpisode) {\r\n                    vm.nextEpisode = _.where(vm.episodes, {videoId: nextEpisode.videoId})[0];\r\n                    //figure out how much of this episode has been watched\r\n                }).then(function() {\r\n                    return Video.getProgressPercent(vm.nextEpisode.videoId);\r\n                    //save the percentWatched to the episode\r\n                }).then(function(percent) {\r\n                    vm.nextEpisode.percentWatched = percent;\r\n                });\r\n            }\r\n\r\n            //load the progress of this video\r\n            Video.getProgressPercent(vm.video.videoId).then(function(percent) {\r\n                vm.progressPercent = percent;\r\n            });\r\n\r\n        })\r\n\r\n        /**\r\n         * Grabs the percent watched for every episode\r\n         * @returns {undefined}\r\n         */\r\n        function fetchAllEpisodePercentWatched() {\r\n            var videoIds = _.pluck(vm.episodes, 'videoId');\r\n            Video.getProgressPercentMultiple(videoIds).then(function(percentObjects) {\r\n                for (var i in percentObjects) {\r\n                    var percentObj = percentObjects[i];\r\n                    var episode = _.where(vm.episodes, {videoId: percentObj.videoId})[0];\r\n                    if (episode) {\r\n                        episode.percentWatched = percentObj.percent;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        function getProgressPercentType() {\r\n            if (vm.progressPercent < 40) {\r\n                return'danger';\r\n            } else if (vm.progressPercent < 99) {\r\n                return 'warning';\r\n            } else if (vm.progressPercent < 101) {\r\n                return 'success';\r\n            }\r\n        }\r\n\r\n        function navigateToShow() {\r\n            Video.getShowFromEpisodeId(vm.videoId).then(function(show) {\r\n                $state.go('videoInfo', {videoId: show.videoId});\r\n            });\r\n        }\r\n    }]);","angular.module('app').controller('VideoSourcesController', ['globals', 'VideoSource', 'notify',\r\n    function(globals, VideoSource, notify) {\r\n        var vm = this;\r\n        vm.editIsVisible = false;\r\n        vm.deleteVideoSource = deleteVideoSource;\r\n        vm.refresh = loadVideoSources;\r\n\r\n        globals.title = 'Video Sources';\r\n        loadVideoSources();\r\n        \r\n        function loadVideoSources() {\r\n            VideoSource.getAll().then(function(videoSources) {\r\n                vm.videoSources = videoSources;\r\n            });\r\n        }\r\n\r\n        function deleteVideoSource(id) {\r\n            VideoSource.deleteById(id).then(loadVideoSources);\r\n        }\r\n    }]);","angular.module('app').directive('categoryScrollerCollection', [function () {\r\n        return {\r\n            restrict: 'E',\r\n            controller: ['Video', Controller],\r\n            controllerAs: 'vm',\r\n            bindToController: true,\r\n            templateUrl: 'categoryScrollerCollectionDirective.html',\r\n            link: function () {\r\n\r\n            }\r\n        };\r\n\r\n        function Controller(Video) {\r\n            var vm = angular.extend(this, {\r\n                categories: undefined\r\n            });\r\n            //get all of the category names\r\n            Video.getCategoryNames().then(function (names) {\r\n                 vm.categoryNames = names;\r\n            });\r\n        }\r\n    }\r\n]);","angular.module('app').directive('categoryScroller', ['$window', '$timeout', 'debounce', function ($window, $timeout, debounce) {\r\n        var id = 0;\r\n        return {\r\n            restrict: 'E',\r\n            controller: ['$scope', 'Video', Controller],\r\n            controllerAs: 'vm',\r\n            bindToController: true,\r\n            templateUrl: 'categoryScrollerDirective.html',\r\n            scope: {\r\n                category: '=?',\r\n                categoryName: '=?'\r\n            },\r\n            link: function ($scope, element, attributes, vm) {\r\n                var myId = id++;\r\n                //anytime the window changes size, determine the new width of this element\r\n                angular.element($window).bind('resize', function () {\r\n                    calculateElementWidth();\r\n                });\r\n\r\n                function calculateElementWidth() {\r\n                    console.log('debouncing ' + myId);\r\n                    debounce(myId, function () {\r\n                        console.log('calling ' + myId);\r\n                        var rect = element[0].getBoundingClientRect();\r\n                        vm.width = rect.width;\r\n                    }, 100);\r\n                }\r\n\r\n                //anytime the width changes, calculate the size of the first video tile in the list\r\n                $scope.$watch(function () {\r\n                    return vm.width;\r\n                }, function (width) {\r\n                   getTileWidth();\r\n                });\r\n                \r\n                function getTileWidth(){\r\n                     //get the first video tile\r\n                    var videoTile = element[0].querySelector('video-tile');\r\n                    var rect = videoTile.getBoundingClientRect();\r\n                    vm.videoTileWidth = rect.width;\r\n                }\r\n                //the first time the length of the video list is greater than zero, recalculate the tile width\r\n                $scope.$watch(function(){\r\n                    return vm.category &&  vm.category.videos.length? true: false;\r\n                }, function(newValue, oldValue){\r\n                    if(newValue){\r\n                        getTileWidth();\r\n                    }\r\n                });\r\n                \r\n                calculateElementWidth();\r\n\r\n            }\r\n        };\r\n\r\n        function Controller($scope, Video) {\r\n            var vm = angular.extend(this, {\r\n                category: this.category,\r\n                direction: undefined,\r\n                width: 0,\r\n                videoTileWidth: 0,\r\n                visibleVideoTileCount: 0,\r\n                visibleVideos: [],\r\n                leftmostVideoIndex: 0,\r\n                //api\r\n                calculateVisibleVideoTileCount: calculateVisibleVideoTileCount,\r\n                getLocationText: getLocationText,\r\n                populateVisibleVideos: populateVisibleVideos,\r\n                pageLeft: pageLeft,\r\n                pageRight: pageRight,\r\n                showPageLeft: showPageLeft,\r\n                showPageRight: showPageRight,\r\n                videoCount: videoCount\r\n            });\r\n\r\n            //anytime the categoryName changes, reload the video list\r\n            $scope.$watch(function () {\r\n                return vm.categoryName;\r\n            }, function (newValue, oldValue) {\r\n                if (newValue) {\r\n                    Video.getCategories([newValue]).then(function (categories) {\r\n                        vm.category = categories[0];\r\n                        populateVisibleVideos();\r\n                    });\r\n                }\r\n            });\r\n\r\n            $scope.$watch(function () {\r\n                return vm.videoTileWidth;\r\n            }, function () {\r\n                vm.calculateVisibleVideoTileCount();\r\n            });\r\n            $scope.$watch(function () {\r\n                return vm.width;\r\n            }, function () {\r\n                vm.calculateVisibleVideoTileCount();\r\n            });\r\n\r\n            $scope.$watch(function () {\r\n                return vm.visibleVideoTileCount;\r\n            }, function (newVisibleVideoTileCount, oldVisibleVideoTileCount) {\r\n                populateVisibleVideos();\r\n            });\r\n\r\n            function populateVisibleVideos() {\r\n                if (vm.visibleVideoTileCount < 1) {\r\n                    vm.visibleVideos = [];\r\n                    return;\r\n                }\r\n                if (!vm.category) {\r\n                    return;\r\n                }\r\n                //if the list of videos is smaller than the maximum displayable, then just add all of them\r\n                if (vm.videoCount() <= vm.visibleVideoTileCount) {\r\n                    vm.visibleVideos = vm.category.videos.slice(0);\r\n                } else {\r\n                    //find the index of the leftmost video\r\n                    var endIndex = vm.leftmostVideoIndex + vm.visibleVideoTileCount;\r\n                    vm.visibleVideos = [];\r\n                    for (var i = vm.leftmostVideoIndex; i < endIndex; i++) {\r\n                        var index = i % vm.videoCount();\r\n                        var video = vm.category.videos[index];\r\n                        if (video) {\r\n                            vm.visibleVideos.push(video);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function calculateVisibleVideoTileCount() {\r\n                //60px for the left and right navigation buttons\r\n                var num = (vm.width - 60) / vm.videoTileWidth;\r\n                if (!isFinite(num)) {\r\n                    num = 0;\r\n                } else {\r\n                    num = Math.floor(num);\r\n                }\r\n                vm.visibleVideoTileCount = num;\r\n            }\r\n\r\n            function pageLeft() {\r\n                var newLeftmostIndex = vm.leftmostVideoIndex - vm.visibleVideoTileCount;\r\n                if (newLeftmostIndex < 0) {\r\n                    newLeftmostIndex = 0;\r\n                }\r\n                vm.leftmostVideoIndex = newLeftmostIndex;\r\n                vm.populateVisibleVideos();\r\n                vm.direction = 'left';\r\n            }\r\n\r\n            function pageRight() {\r\n                var newLeftmostIndex = vm.leftmostVideoIndex + vm.visibleVideoTileCount;\r\n                var maxLeftmostIndex = (vm.videoCount() + 1) - vm.visibleVideoTileCount;\r\n                if (newLeftmostIndex > maxLeftmostIndex) {\r\n                    newLeftmostIndex = maxLeftmostIndex;\r\n                }\r\n                vm.leftmostVideoIndex = newLeftmostIndex;\r\n                console.log('leftmost idx' + vm.leftmostVideoIndex);\r\n                vm.populateVisibleVideos();\r\n                vm.direction = 'right';\r\n            }\r\n\r\n            function videoCount() {\r\n                return vm.category ? vm.category.videos.length : 0;\r\n            }\r\n\r\n            function showPageLeft() {\r\n                return vm.leftmostVideoIndex > 0\r\n            }\r\n\r\n            function showPageRight() {\r\n                var maxLeftmostIndex = (vm.videoCount() - 1) - vm.visibleVideoTileCount;\r\n                return vm.leftmostVideoIndex < maxLeftmostIndex;\r\n            }\r\n\r\n            function getLocationText() {\r\n                return \"\";\r\n                var firstNumber = vm.leftmostVideoIndex = 0 ? 0 : (vm.leftmostVideoIndex + 1);\r\n                var text = firstNumber + '-' + (vm.leftmostVideoIndex + vm.visibleVideos.length) + ' of ' + vm.videoCount();\r\n                return text;\r\n            }\r\n        }\r\n    }\r\n]);","angular.module('app').directive('confirm', [function() {\r\n        return {\r\n            restrict: 'A',\r\n            link: function(scope, element, attributes, controller) {\r\n                element.on('click', function() {\r\n                    var message = scope.$eval(attributes.confirmMessage);\r\n                    message = message? message: 'Are you sure you want to do that?';\r\n                    //show the confirm modal\r\n                    var confirmed = confirm(message);\r\n                    if (confirmed) {\r\n                        scope.$eval(attributes.confirm);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n    }]);","angular.module('app').directive('episode', [function () {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                episode: '='\r\n            },\r\n            controller: Controller,\r\n            controllerAs: 'vm',\r\n            bindToController: true,\r\n            link: function($scope, element, attributes, vm){\r\n                \r\n            },\r\n            templateUrl: 'episodeDirective.html'\r\n        };\r\n        \r\n        function Controller(){\r\n            var vm = angular.extend(this, {\r\n                //episode\r\n            }, this);\r\n            \r\n            var maxTitleLength = 16;\r\n            //truncate the title \r\n            \r\n            vm.title = vm.episode.title;\r\n            if(vm.episode.title.length > maxTitleLength){\r\n                vm.title = vm.episode.title.substring(0, maxTitleLength) + '...';\r\n            }\r\n\r\n            //calculate the runtime text\r\n            if(typeof vm.episode.runtime === 'number' && vm.episode.runtime > -1){\r\n                var runtimeMinutes = parseInt(vm.episode.runtime / 60);\r\n                vm.runtimeText = '(' + runtimeMinutes + ' min)';\r\n            }   \r\n        }\r\n    }\r\n]);","angular.module('app').directive('focus', ['$timeout', '$parse', function($timeout, $parse) {\r\n        return {\r\n            restrict: 'A',\r\n            link: function($scope, element, attributes, controller) {\r\n                $scope.$watch(function() {\r\n                    return $scope.$eval(attributes.focus);\r\n                }, function(focus) {\r\n                    if (focus === true) {\r\n                        $timeout(function() {\r\n                            element[0].focus();\r\n                            getter = $parse(attributes.focus);\r\n                            //override the value with a false now that we have performed the focus\r\n                            getter.assign($scope, false);\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n    }]);","angular.module('app').directive('jwplayer', ['uniqueId', function(uniqueId) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            controllerAs: 'vm',\r\n            controller: ['Video', '$scope', 'util', Controller],\r\n            bindToController: true,\r\n            scope: {\r\n                videoId: '='\r\n            },\r\n            link: function(scope, element, attributes, vm) {\r\n                vm.elementId = element.attr('id');\r\n                vm.playlist = [{file: 'http://localhost:8080/videos/movies/A%20Good%20Day%20to%20Die%20Hard/A%20Good%20Day%20to%20Die%20Hard.mp4'}];\r\n                if (!vm.elementId) {\r\n                    vm.elementId = uniqueId();\r\n                }\r\n\r\n                element.attr('id', vm.elementId);\r\n\r\n                //TODO - implement the keyboard shortcuts\r\n                function keyboardShortcuts(e) {\r\n                    switch (e.which) {\r\n                        case 32://spacebar key\r\n                            //toggle playback\r\n                            jwplayer().play();\r\n                            break;\r\n                        case 70: //f key\r\n                            //toggle fullscreen\r\n                            if (player.getFullscreen() === true) {\r\n                                player.setFullscreen(false);\r\n                            } else {\r\n                                player.setFullscreen(true);\r\n                            }\r\n                            break;\r\n                        case 39: //right arrow key\r\n                            //seek forward n seconds\r\n                            var position = player.getPosition();\r\n                            var newPosition = position + seekBurstSeconds;\r\n                            if (position <= seekPosition) {\r\n                                newPosition = seekPosition + seekBurstSeconds;\r\n                            }\r\n                            seekPosition = newPosition;\r\n                            player.seek(seekPosition);\r\n                            break;\r\n                        case 37: //left arrow key\r\n                            //seek backwards n seconds\r\n                            var position = player.getPosition();\r\n                            var newPosition = position - seekBurstSeconds;\r\n                            if (position >= seekPosition) {\r\n                                newPosition = seekPosition - seekBurstSeconds;\r\n                            }\r\n                            seekPosition = newPosition;\r\n                            player.seek(seekPosition);\r\n                            break;\r\n                    }\r\n                }\r\n            },\r\n            template: '<div class=\"jwplayer\"></div>'\r\n        }\r\n\r\n        function Controller(Video, $scope, util) {\r\n            var vm = this;\r\n            angular.extend(this,\r\n                    {\r\n                        play: play,\r\n                        pause: pause,\r\n                        playlist: [],\r\n                        loadVideo: loadVideo,\r\n                        togglePlayback: togglePlayback\r\n                    }\r\n            );\r\n            var startSeconds = 0;\r\n            //keeps track of the number of seconds that have passed since the video has saved its position in the database\r\n            var playPositionUpdateTime = new Date();\r\n\r\n            //load the video\r\n            Video.getById(vm.videoId).then(function(video) {\r\n                //get the current progress of this video.\r\n                Video.getProgress(vm.videoId).then(function(seconds) {\r\n                    vm.video = video;\r\n                    startSeconds = seconds;\r\n                });\r\n            });\r\n\r\n            $scope.$watch('vm.video', vm.loadVideo);\r\n\r\n            //when the directive is removed, remove the jwplayer from the page\r\n            $scope.$on('$destroy', function() {\r\n                jwplayer(vm.elementId).remove();\r\n            });\r\n\r\n            /**\r\n             * Toggles the play/pause state. if playing, the player pauses. if paused, the player plays.\r\n             */\r\n            function togglePlayback() {\r\n                vm.player.play();\r\n            }\r\n\r\n            /**\r\n             * Tells the player to play. If already playing, playback continues. \r\n             * if paused, the player starts playing.\r\n             */\r\n            function play() {\r\n                vm.player.play(true);\r\n            }\r\n\r\n            /**\r\n             * Pauses the player. If the player is playing, playback is paused. \r\n             * if the player is paused, the player stays paused.\r\n             */\r\n            function pause() {\r\n                vm.player.pause(false);\r\n            }\r\n\r\n            function loadVideo(video) {\r\n                //empty the playlist \r\n                util.blankItemInPlace(vm.playlist);\r\n                if (!video) {\r\n                    return;\r\n                }\r\n                //add the video to the playlist\r\n                vm.playlist.push({\r\n                    file: video.url,\r\n                    image: video.posterUrl,\r\n                    title: video.title,\r\n                    video: video\r\n                });\r\n\r\n                if (vm.jwplayer) {\r\n                    vm.player.load(vm.playlist);\r\n                } else {\r\n                    //the jwplayer has not yet been created, create it now\r\n                    jwplayer(vm.elementId).setup({\r\n                        flashplayer: 'lib/jwplayer-6.11/jwplayer.flash.swf',\r\n                        primary: 'html5',\r\n                        playlist: vm.playlist,\r\n                        startparam: 'start',\r\n                        wmode: 'transparent',\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        events: {\r\n                            onTime: onTime,\r\n                            onPlay: onPlay,\r\n                            onComplete: onComplete\r\n                        },\r\n                        autostart: true\r\n                    });\r\n                    vm.player = jwplayer(vm.elementId);\r\n                }\r\n            }\r\n\r\n            var startVideoWhereWeLeftOffProcessed = false;\r\n            /**\r\n             * Event that is called every time the video changes time position. This may be called up to \r\n             * 10 times a second\r\n             */\r\n            function onTime(obj) {\r\n                if (startVideoWhereWeLeftOffProcessed === false && obj.position > 0) {\r\n                    startVideoWhereWeLeftOffProcessed = true;\r\n                    startVideoWhereWeLeftOff();\r\n                    return;\r\n                }\r\n\r\n                var positionInSeconds = obj.position;\r\n                //every so often, update the database with the current video's play position\r\n                var nowTime = new Date();\r\n                var timeSinceLastUpdate = nowTime - playPositionUpdateTime;\r\n                if (timeSinceLastUpdate > 5000) {\r\n                    playPositionUpdateTime = new Date();\r\n                    Video.setProgress(vm.video.videoId, positionInSeconds);\r\n                }\r\n            }\r\n            \r\n            function onComplete(){\r\n                console.debug('Finished playing video ' + vm.video.videoId);\r\n                Video.setProgress(vm.video.videoId, -1, true);\r\n            }\r\n\r\n            /**\r\n             * Seeks to the playback position indicated by the database. This should only be called ONCE, \r\n             * and only after the video has started playing\r\n             */\r\n            function startVideoWhereWeLeftOff() {\r\n                //seek the player to the startPosition\r\n                //if a startSeconds value greater than 0 was provided, seek to that position in the video\r\n                if (startSeconds > 0) {\r\n                    vm.player.seek(startSeconds);\r\n                    console.debug('seeking to ', startSeconds);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Event that is fired every time the video starts playing\r\n             */\r\n            function onPlay() {\r\n                playPositionUpdateTime = new Date();\r\n            }\r\n\r\n        }\r\n    }]);","angular.module('app').directive('loadMessage', [function () {\r\n    'use strict';\r\n    return {\r\n        restrict: 'E',\r\n        scope: {\r\n            message: '='\r\n        },\r\n        template: '<span ng-show=\"message !== undefined\"><span class=\"wait-small\"></span>&nbsp;{{message}}</span>'\r\n    };\r\n}]);","angular.module('app').directive('videoTile', [function() {\r\n        return {\r\n            restrict: 'E',\r\n            controllerAs: 'vm',\r\n            controller: [Controller],\r\n            bindToController: true,\r\n            scope: {\r\n                video: '='\r\n            },\r\n            templateUrl: 'videoTileDirective.html'\r\n        }\r\n\r\n        function Controller() {\r\n            \r\n        }\r\n    }]);","angular.module('app').directive('pathExistsValidator', ['$http', '$q', function($http, $q) {\r\n    return { \r\n        require: 'ngModel',\r\n        link: function(scope, element, attrs, ngModel) {\r\n            ngModel.$asyncValidators.pathExists = function(modelValue, viewValue) {\r\n                var value = modelValue || viewValue;\r\n                return $http.get('api/GetPathExistsOnServer.php', {params: {path: value}}).then(\r\n                        function(response) {\r\n                            if (!response.data.exists === true) {\r\n                                return $q.reject(response.data.errorMessage);\r\n                            }\r\n                            return true;\r\n                        }\r\n                );\r\n            };\r\n        }\r\n    };\r\n}]);","angular.module('app').directive('urlExistsValidator', ['$http', '$q', function ($http, $q) {\r\n        return {\r\n            require: 'ngModel',\r\n            link: function (scope, element, attrs, ngModel) {\r\n                ngModel.$asyncValidators.urlExists = function (modelValue, viewValue) {\r\n                    var value = modelValue || viewValue;\r\n                    return $http.get('api/GetUrlExists.php', {params: {url: value}}).then(function (response) {\r\n                        if (!response.data.exists === true) {\r\n                            return $q.reject(response.data.errorMessage);\r\n                        }\r\n                        return true;\r\n                    }, function(err){\r\n                    });\r\n                };\r\n            }\r\n        };\r\n    }]);","angular.module('app').service('admin', ['$http', '$q', '_', function($http, $q, _) {\r\n        return {\r\n            getServerVersionNumber: getServerVersionNumber,\r\n            updateApplication: updateApplication\r\n        };\r\n\r\n        /**\r\n         * Finds a poster and metadata for every video in the library that does not have one yet.\r\n         * @returns {$q@call;defer.promise}\r\n         */\r\n        function getServerVersionNumber() {\r\n            var deferred = $q.defer();\r\n            $http.get('api/GetServerVersionNumber.php')\r\n                    .success(function(result) {\r\n                        deferred.resolve(result);\r\n                    })\r\n                    .error(function() {\r\n                        deferred.reject();\r\n                    });\r\n            return deferred.promise;\r\n        }\r\n\r\n        /**\r\n         * Checks for updates to this application and updates if there are any.\r\n         * @returns {undefined}\r\n         */\r\n        function updateApplication() {\r\n            var deferred = $q.defer();\r\n            $http.get('api/Update.php')\r\n                    .success(function(result) {\r\n                        if (result.success === true) {\r\n                            deferred.resolve(result);\r\n                        } else {\r\n                            deferred.reject(result);\r\n                        }\r\n                    })\r\n                    .error(function(err) {\r\n                        deferred.reject(err);\r\n                    });\r\n            return deferred.promise;\r\n        }\r\n    }]);","angular.module('app').service('api', ['$q', '$http', function($q, $http) {\r\n        return {\r\n            generateLibrary: generateLibrary\r\n        };\r\n\r\n        function generateLibrary() {\r\n            return $q(function(resolve, reject) {\r\n                $http.get('api/GenerateLibrary.php')\r\n                        .success(function(result) {\r\n                            if (result.success) {\r\n                                resolve();\r\n                            } else {\r\n                                reject();\r\n                            }\r\n                        })\r\n                        .error(function() {\r\n                            reject();\r\n                        })\r\n\r\n            });\r\n        }\r\n    }]);","angular.module('app').factory('debounce', ['$rootScope', function ($rootScope) {\r\n\r\n        var registry = [];\r\n\r\n        function registryIndexOf(identifier) {\r\n            for (var i in registry) {\r\n                var registryItem = registry[i];\r\n                if (registryItem.identifier === identifier) {\r\n                    return i;\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        function getFromRegistry(identifier) {\r\n            var idx = registryIndexOf(identifier);\r\n            return registry[idx];\r\n        }\r\n\r\n        function setRegistryItem(identifier, callback, expirationMilliseconds) {\r\n            var registryItemIndex = registryIndexOf(identifier);\r\n            var registryItem;\r\n            //if there is no item in the registry with this identifier, make a new item\r\n            if (registryItemIndex === -1) {\r\n                registryItem = {\r\n                    identifier: identifier,\r\n                    callback: callback,\r\n                    expirationDate: undefined\r\n                };\r\n            } else {\r\n                //get the item from the registry\r\n                registryItem = registry[registryItemIndex];\r\n            }\r\n\r\n            registryItem.expirationDate = new Date(Date.now() + expirationMilliseconds);\r\n\r\n            if (registryItemIndex === -1) {\r\n                registry.push(registryItem);\r\n            }\r\n            return registryItem;\r\n        }\r\n\r\n        function debounce(identifier, callback, expirationMilliseconds) {\r\n            expirationMilliseconds = typeof expirationMilliseconds === 'number' ? expirationMilliseconds : 300;\r\n\r\n            var registryItem = setRegistryItem(identifier, callback, expirationMilliseconds);\r\n\r\n\r\n            //set a timeout and then see if the debounce has expired yet\r\n            setTimeout(function () {\r\n                if (registryItem.expirationDate < Date.now()) {\r\n                    //the debounce has expired. call the callback\r\n                    try {\r\n                        $rootScope.$apply(function () {\r\n                            registryItem.callback();\r\n                        });\r\n                    } catch (e) {\r\n                    }\r\n                    try {\r\n                        //remove this item from the registry\r\n                        registry.splice(registry.indexOf(registryItem), 1);\r\n                    } catch (e) {\r\n\r\n                    }\r\n                } else {\r\n                    //do nothing. something else has bumped the expiration date, so let that one's timeout handle it\r\n                }\r\n            }, expirationMilliseconds + 5);\r\n        }\r\n        return debounce;\r\n    }\r\n]);","angular.module('app').service('globals', [function() {\r\n        return {\r\n            pageTitle: 'PlumMediaCenter',\r\n            hideNavbar: false,\r\n            infiniteScrollPageSize: 25,\r\n            //whenever the admin page launches a metadata fetch, keep track of its status here. \r\n            fetchMissingMetadataIsPending: false,\r\n            generateLibraryIsPending: false,\r\n            checkForUpdatesIsPending: false\r\n        };\r\n    }]);","angular.module('app').service('_', function(){\r\n    return window._;\r\n});","angular.module('app').service('notify', function() {\r\n    return notify;\r\n});\r\n\r\n function notify(message, type) {\r\n        type = type ? type : 'warning';\r\n        //if danger was provided, convert to error\r\n        type = type === 'danger' ? 'error' : type;\r\n        \r\n        return new PNotify({\r\n            title: '',\r\n            text: message,\r\n            styling: 'bootstrap3',\r\n            type: type\r\n        });\r\n    }","/**\r\n * Takes an image url and refreshes that image so that the browser cache can be refreshed\r\n * @param {type} param1\r\n * @param {type} param2\r\n */\r\nangular.module('app').service('refreshImage', ['$q', function($q) {\r\n        function refreshImage(uri) {\r\n            var deferred = $q.defer();\r\n            var reload = function() {\r\n                // Force a reload of the iframe\r\n                this.contentWindow.location.reload(true);\r\n\r\n                // Remove `load` event listener and remove iframe\r\n                this.removeEventListener('load', reload, false);\r\n                this.parentElement.removeChild(this);\r\n\r\n               deferred.resolve();\r\n            };\r\n\r\n            var iframe = document.createElement('iframe');\r\n            iframe.style.display = 'none';\r\n\r\n            // Reload iframe once it has loaded\r\n            iframe.addEventListener('load', reload, false);\r\n\r\n            // Only call callback if error occured while loading\r\n            iframe.addEventListener('error', deferred.reject, false);\r\n            iframe.src = uri;\r\n            document.body.appendChild(iframe);\r\n            return deferred.promise;\r\n        }\r\n\r\n        return refreshImage;\r\n    }]);","angular.module('app').service('uniqueId', [function() {\r\n        var counter = 0;\r\n        return function() {\r\n            counter++;\r\n            return 'element-' + counter;\r\n        }\r\n    }]);","angular.module('app').service('util', ['_', function(_) {\r\n        return {\r\n            blankItemInPlace: blankItemInPlace\r\n        };\r\n\r\n        function blankItemInPlace(item) {\r\n            if (_.isArray(item)) {\r\n                while (item.length > 0) {\r\n                    item.pop();\r\n                }\r\n            } else {\r\n                for (var i in item) {\r\n                    delete item[i];\r\n                }\r\n            }\r\n        }\r\n    }]);","angular.module('app').service('Video', ['$http', '$q', '_', function ($http, $q, _) {\r\n        function Video() {\r\n\r\n        }\r\n\r\n        Video.search = function (searchTerm) {\r\n            var deferred = $q.defer();\r\n            $http.get('api/GetSearchResults.php', {params: {q: searchTerm}}).success(function (data) {\r\n                deferred.resolve(data);\r\n            }).error(function () {\r\n                deferred.reject();\r\n            });\r\n            return deferred.promise;\r\n        };\r\n\r\n        Video.getAll = function () {\r\n            return $q(function (resolve, reject) {\r\n                $http.get('api/GetLibrary.php').success(function (data) {\r\n                    resolve(data);\r\n                });\r\n            });\r\n        };\r\n\r\n        Video.getById = function (id) {\r\n            var deferred = $q.defer();\r\n            if (!_.isNumber(id)) {\r\n                deferred.reject();\r\n            } else {\r\n                $http.get('api/GetVideo.php?videoId=' + id).success(function (data) {\r\n                    deferred.resolve(data);\r\n                }).error(function () {\r\n                    deferred.reject(data);\r\n                });\r\n            }\r\n            return deferred.promise;\r\n        };\r\n\r\n        Video.getEpisodes = function (showId) {\r\n            var deferred = $q.defer();\r\n            $http.get('api/GetTvEpisodes.php?videoId=' + showId).success(function (data) {\r\n                deferred.resolve(data);\r\n            }).error(function () {\r\n                deferred.reject();\r\n            });\r\n            return deferred.promise;\r\n        };\r\n\r\n        Video.getNextEpisode = function (showId) {\r\n            var deferred = $q.defer();\r\n            $http.get('api/GetNextEpisode.php?videoId=' + showId).success(function (data) {\r\n                deferred.resolve(data);\r\n            }).error(function () {\r\n                deferred.reject();\r\n            });\r\n            return deferred.promise;\r\n        };\r\n\r\n        /**\r\n         * Get how much percentage watched this video is\r\n         * @param {type} videoId\r\n         * @returns {$q@call;defer.promise}\r\n         */\r\n        Video.getProgressPercent = function (videoId) {\r\n            var deferred = $q.defer();\r\n            $http.get('api/GetVideoProgressPercent.php', {params: {videoId: videoId}})\r\n                    .success(function (result) {\r\n                        deferred.resolve(result.percent);\r\n                    })\r\n                    .error(deferred.reject);\r\n            return deferred.promise;\r\n        };\r\n\r\n        /**\r\n         * Get how much percentage watched each video is\r\n         * @param {type} videoId\r\n         * @returns {$q@call;defer.promise}\r\n         */\r\n        Video.getProgressPercentMultiple = function (videoIds) {\r\n            videoIds = _.isArray(videoIds) ? videoIds : [];\r\n            var deferred = $q.defer();\r\n            $http.get('api/GetVideoProgressPercentMultiple.php', {\r\n                params: {\r\n                    videoIds: videoIds.join(',')\r\n                }\r\n            }).success(function (result) {\r\n                deferred.resolve(result);\r\n            }).error(deferred.reject);\r\n            return deferred.promise;\r\n        };\r\n\r\n        /**\r\n         * Get the number of seconds into a video the current user is. \r\n         * @param {type} videoId\r\n         * @returns {$q@call;defer.promise}\r\n         */\r\n        Video.getProgress = function (videoId) {\r\n            var deferred = $q.defer();\r\n            $http.get('api/GetVideoProgress.php', {params: {\r\n                    videoId: videoId\r\n                }}).success(function (data) {\r\n                deferred.resolve(data.startSeconds);\r\n            }).error(function () {\r\n                deferred.reject();\r\n            });\r\n            return deferred.promise;\r\n        }\r\n\r\n        Video.setProgress = function (videoId, seconds, isFinished) {\r\n            isFinished = isFinished === true ? true : false;\r\n\r\n            var deferred = $q.defer();\r\n            $http.get('api/SetVideoProgress.php', {params: {\r\n                    videoId: videoId,\r\n                    seconds: seconds,\r\n                    finished: isFinished\r\n                }}).success(function (data) {\r\n                if (data.success) {\r\n                    deferred.resolve();\r\n                } else {\r\n                    deferred.reject();\r\n                }\r\n            }).error(function () {\r\n                deferred.reject();\r\n            });\r\n            return deferred.promise;\r\n        }\r\n\r\n        Video.getCounts = function () {\r\n            var deferred = $q.defer();\r\n            $http.get('api/GetVideoCounts.php').success(function (data) {\r\n                deferred.resolve(data);\r\n            }).error(function () {\r\n                deferred.reject();\r\n            });\r\n            return deferred.promise;\r\n        };\r\n\r\n        Video.fetchMetadata = function (videoId, onlineVideoId) {\r\n            var deferred = $q.defer();\r\n            $http.get('api/FetchVideoMetadata.php', {params: {videoId: videoId, onlineVideoId: onlineVideoId}}).success(function (data) {\r\n                deferred.resolve(data);\r\n            }).error(function () {\r\n                deferred.reject();\r\n            });\r\n            return deferred.promise;\r\n        };\r\n\r\n        Video.getMetadataSearchResultsByTitle = function (mediaType, title) {\r\n            var deferred = $q.defer();\r\n            $http.get('api/GetMetadataSearchResults.php', {\r\n                params: {\r\n                    mediaType: mediaType,\r\n                    title: title\r\n                }\r\n            }).success(function (data) {\r\n                deferred.resolve(data);\r\n            }).error(function () {\r\n                deferred.reject();\r\n            });\r\n            return deferred.promise;\r\n        }\r\n        Video.getMetadataSearchResultsByOnlineVideoId = function (mediaType, onlineVideoId) {\r\n            var deferred = $q.defer();\r\n            $http.get('api/GetMetadataSearchResults.php', {\r\n                params: {\r\n                    mediaType: mediaType,\r\n                    onlineVideoId: onlineVideoId\r\n                }\r\n            }).success(function (data) {\r\n                deferred.resolve(data);\r\n            }).error(function () {\r\n                deferred.reject();\r\n            });\r\n            return deferred.promise;\r\n        }\r\n\r\n        Video.getPathInfo = function (videoId) {\r\n            var deferred = $q.defer();\r\n            $http.get('api/GetVideoPathInfo.php?videoId=' + videoId)\r\n                    .success(function (video) {\r\n                        deferred.resolve(video);\r\n                    })\r\n                    .error(function () {\r\n                        deferred.reject();\r\n                    });\r\n            return deferred.promise;\r\n        }\r\n\r\n        Video.getShowFromEpisodeId = function (episodeId) {\r\n            var deferred = $q.defer();\r\n            $http.get('api/GetTvShowByEpisodeId.php?videoId=' + episodeId)\r\n                    .success(function (video) {\r\n                        deferred.resolve(video);\r\n                    })\r\n                    .error(function () {\r\n                        deferred.reject();\r\n                    });\r\n            return deferred.promise;\r\n        }\r\n\r\n        /**\r\n         * Finds a poster and metadata for every video in the library that does not have one yet.\r\n         * @returns {$q@call;defer.promise}\r\n         */\r\n        Video.fetchMissingMetadata = function () {\r\n            var deferred = $q.defer();\r\n            $http.get('api/FetchMissingMetadataAndPosters.php')\r\n                    .success(function (result) {\r\n                        deferred.resolve(result);\r\n                    })\r\n                    .error(function () {\r\n                        deferred.reject();\r\n                    });\r\n            return deferred.promise;\r\n        }\r\n\r\n        Video.addNewMediaItem = function (videoSourceId, newMediaItemPath) {\r\n            return $http.get('api/AddNewMediaItem.php', {params: {videoSourceId: videoSourceId, path: newMediaItemPath}}).success(function (result) {\r\n                return result;\r\n            }).error(function (error) {\r\n                return error;\r\n            });\r\n\r\n        };\r\n\r\n\r\n        Video.getCategoryNames = function () {\r\n            return $http.get('api/GetCategoryNames.php').then(function (result) {\r\n                return result.data;\r\n            }, function (error) {\r\n                return error;\r\n            });\r\n        };\r\n\r\n        Video.getCategories = function (names) {\r\n            names = typeof names !== 'string' && typeof names.length === 'number'?names: [];\r\n            return $http.get('api/GetCategories.php', {params: {names: names.join(',')}}).then(function (result) {\r\n                return result.data;\r\n            }, function (error) {\r\n                return error;\r\n            });\r\n        };\r\n        return Video;\r\n    }]);","angular.module('app').service('VideoSource', ['$http', '$q', function($http, $q) {\r\n        function VideoSource() {\r\n\r\n        }\r\n\r\n        VideoSource.getAll = function() {\r\n            var deferred = $q.defer();\r\n            $http.get('api/GetVideoSources.php').success(function(data) {\r\n                deferred.resolve(data);\r\n            }).error(function() {\r\n                deferred.reject();\r\n            });\r\n            return deferred.promise;\r\n        };\r\n\r\n        VideoSource.getById = function(id) {\r\n            var deferred = $q.defer();\r\n            $http.get('api/GetVideoSourceById.php?id=' + id).success(function(data) {\r\n                deferred.resolve(data);\r\n            }).error(function() {\r\n                deferred.reject();\r\n            });\r\n            return deferred.promise;\r\n        };\r\n\r\n        VideoSource.save = function(videoSource) {\r\n            return $q(function(resolve, reject) {\r\n                $http.post('api/PostVideoSource.php', videoSource).then(function(result) {\r\n                    resolve(result.data);\r\n                }, reject);\r\n            });\r\n        };\r\n\r\n        VideoSource.deleteById = function(id) {\r\n            return $q(function(resolve, reject) {\r\n                $http.delete('api/DeleteVideoSource.php', {data: {id: id}}).then(function(result) {\r\n                    resolve(result.data);\r\n                }, reject);\r\n            });\r\n        };\r\n\r\n        return VideoSource;\r\n    }]);"]}