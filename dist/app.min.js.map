{"version":3,"sources":["app.js","services/notifyService.js","routes.js","directives/confirmDirective.js","directives/episodeDirective.js","directives/focusDirective.js","directives/jwplayerDirective.js","directives/videoTileDirective.js","controllers/AdminController.js","controllers/BaseController.js","controllers/EditVideoSourceController.js","controllers/FetchByTitleController.js","controllers/HomeController.js","controllers/MetadataFetcherController.js","controllers/NavbarController.js","controllers/PlayController.js","controllers/SearchController.js","controllers/VideoInfoController.js","controllers/VideoSourcesController.js","services/adminService.js","services/apiService.js","services/globalsService.js","services/libs.js","services/refreshImageService.js","services/uniqueIdService.js","services/util.js","services/VideoService.js","services/VideoSourceService.js","validators/pathExistsValidator.js","validators/urlExistsValidator.js"],"names":["fetchConstants","injector","angular","$http","get","$q","promises","resolve","reject","then","result","module","constant","data","all","bootstrapApplication","element","document","ready","bootstrap","notify","message","type","PNotify","title","text","styling","run","$rootScope","enums","globals","config","$stateProvider","$urlRouterProvider","otherwise","state","url","templateUrl","controller","controllerAs","parent","$state","$stateParams","directive","restrict","link","scope","attributes","on","$eval","confirmMessage","confirmed","confirm","Controller","vm","extend","this","maxTitleLength","episode","length","substring","runtime","runtimeText","bindToController","$scope","$timeout","$parse","$watch","focus","getter","assign","uniqueId","Video","util","togglePlayback","player","play","pause","loadVideo","video","blankItemInPlace","playlist","push","file","image","posterUrl","jwplayer","load","elementId","setup","flashplayer","primary","startparam","wmode","width","height","events","onTime","onPlay","onComplete","autostart","obj","startVideoWhereWeLeftOffProcessed","position","startVideoWhereWeLeftOff","positionInSeconds","nowTime","Date","timeSinceLastUpdate","playPositionUpdateTime","setProgress","videoId","console","debug","startSeconds","seek","getById","getProgress","seconds","$on","remove","replace","attr","template","$window","api","admin","generateLibrary","generateLibraryIsPending","err","getVideoCounts","getServerVersionNumber","version","serverVersionNumber","getCounts","videoCounts","fetchMissingMetadata","fetchMissingMetadataIsPending","updateApplication","checkForUpdatesIsPending","updateWasApplied","location","reload","undefined","VideoSource","loadVideoSource","id","isLoading","videoSource","originalVideoSource","copy","reset","form","setPristine","save","isSaving","go","securityType","sayHi","alert","loadMore","numberToLoad","infiniteScrollPageSize","beginIndex","currentlyLoadedVideos","endIndex","allVideos","i","getAll","videos","refreshImage","searchByChanged","calculateTextboxLabel","searchBy","searchByOptions","searchValue","textboxLabel","mediaType","mediaTypeMovie","search","isSearching","promise","getMetadataSearchResultsByTitle","getMetadataSearchResultsByOnlineVideoId","searchResults","metadataResults","fetchMetadataByOnlineVideoId","onlineVideoId","metadataIsBeingFetched","fetchMetadata","sdPosterUrl","hdPosterUrl","setTimeout","window","getPathInfo","searchTerm","trim","q","hideNavbar","showNavbar","navbarIsOpen","toggleNavbar","showVideoId","fetchAllEpisodePercentWatched","videoIds","_","pluck","episodes","getProgressPercentMultiple","percentObjects","percentObj","where","percentWatched","percent","getProgressPercentType","progressPercent","navigateToShow","getShowFromEpisodeId","show","preventCache","getEpisodes","getNextEpisode","nextEpisode","getProgressPercent","loadVideoSources","videoSources","deleteVideoSource","deleteById","editIsVisible","refresh","service","deferred","defer","success","error","pageTitle","uri","contentWindow","removeEventListener","parentElement","removeChild","iframe","createElement","style","display","addEventListener","src","body","appendChild","counter","item","isArray","pop","params","isNumber","showId","join","isFinished","finished","episodeId","post","require","attrs","ngModel","$asyncValidators","pathExists","modelValue","viewValue","value","path","response","exists","errorMessage","urlExists"],"mappings":"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","file":"app.min.js","sourcesContent":["angular.module('app', ['ui.router', 'ui.bootstrap', 'infinite-scroll'])\n        .run(['$rootScope', 'enums', 'globals', function($rootScope, enums, globals) {\n                $rootScope.enums = enums;\n                $rootScope.globals = globals;\n            }]);\n\nfetchConstants().then(bootstrapApplication);\n\n\n/**\n * Load constants asynchronously BEFORE bootstrapping the application\n * @returns {unresolved}\n */\nfunction fetchConstants() {\n    var injector = angular.injector([\"ng\"])\n    var $http = injector.get(\"$http\");\n    var $q = injector.get('$q');\n\n    var promises = [\n        $q(function(resolve, reject) {\n            $http.get('api/GetEnumerations.php').then(function(result) {\n                angular.module('app').constant(\"enums\", result.data);\n                resolve();\n            }, reject);\n        })\n    ];\n\n    return $q.all(promises);\n}\n\nfunction bootstrapApplication() {\n    angular.element(document).ready(function() {\n        angular.bootstrap(document, [\"app\"]);\n    });\n}","angular.module('app').service('notify', function() {\n    return notify;\n});\n\n function notify(message, type) {\n        type = type ? type : 'warning';\n        //if danger was provided, convert to error\n        type = type === 'danger' ? 'error' : type;\n        \n        return new PNotify({\n            title: '',\n            text: message,\n            styling: 'bootstrap3',\n            type: type\n        });\n    }","angular.module('app')\n        .config(['$stateProvider', '$urlRouterProvider',\n            function($stateProvider, $urlRouterProvider) {\n                $urlRouterProvider.otherwise('/home');\n\n                $stateProvider\n                        .state('home', {\n                            url: '/home',\n                            templateUrl: 'home.html',\n                            controller: 'HomeController',\n                            controllerAs: 'vm'\n                        })\n                        .state('admin', {\n                            url: '/admin',\n                            templateUrl: 'admin.html',\n                            controller: 'AdminController',\n                            controllerAs: 'vm'\n                        })\n                        .state('videoInfo', {\n                            url: '/videoInfo/{videoId:int}',\n                            templateUrl: 'videoInfo.html',\n                            controller: 'VideoInfoController',\n                            controllerAs: 'vm'\n                        })\n                        .state('videoSources', {\n                            url: '/videoSources',\n                            templateUrl: 'videoSources.html',\n                            controller: 'VideoSourcesController',\n                            controllerAs: 'vm'\n                        })\n                        .state('editVideoSource', {\n                            url: '/editVideoSource/{id:int}',\n                            parent: 'videoSources',\n                            templateUrl: 'editVideoSource.html',\n                            controller: 'EditVideoSourceController',\n                            controllerAs: 'vm'\n                        })\n                        .state('play', {\n                            url: '/play/{videoId:int}?{showVideoId:int}',\n                            templateUrl: 'play.html',\n                            controller: 'PlayController',\n                            controllerAs: 'vm'\n                        })\n                        .state('search', {\n                            url: '/search?q',\n                            templateUrl: 'search.html',\n                            controller: 'SearchController',\n                            controllerAs: 'vm'\n                        })\n                        .state('metadataFetcher', {\n                            url: '/metadataFetcher/{videoId:int}',\n                            templateUrl: 'metadataFetcher.html',\n                            controller: 'MetadataFetcherController',\n                            controllerAs: 'vm'\n                        }) \n            }])\n\n        .run(['$rootScope', '$state', '$stateParams', function($rootScope, $state, $stateParams) {\n                $rootScope.$state = $state;\n                $rootScope.$stateParams = $stateParams;\n            }])","angular.module('app').directive('confirm', [function() {\n        return {\n            restrict: 'A',\n            link: function(scope, element, attributes, controller) {\n                element.on('click', function() {\n                    var message = scope.$eval(attributes.confirmMessage);\n                    message = message? message: 'Are you sure you want to do that?';\n                    //show the confirm modal\n                    var confirmed = confirm(message);\n                    if (confirmed) {\n                        scope.$eval(attributes.confirm);\n                    }\n                });\n            }\n        }\n\n    }]);","angular.module('app').directive('episode', [function () {\n        return {\n            restrict: 'E',\n            scope: {\n                episode: '='\n            },\n            controller: Controller,\n            controllerAs: 'vm',\n            bindToController: true,\n            link: function($scope, element, attributes, vm){\n                \n            },\n            templateUrl: 'episodeDirective.html'\n        };\n        \n        function Controller(){\n            var vm = angular.extend(this, {\n                //episode\n            }, this);\n            \n            var maxTitleLength = 20;\n            //truncate the title \n            \n            vm.title = vm.episode.title;\n            if(vm.episode.title.length > maxTitleLength){\n                vm.title = vm.episode.title.substring(0, 20) + '...';\n            }\n            \n            //calculate the runtime text\n            if(typeof vm.episode.runtime === 'number' && vm.episode.runtime > -1){\n                vm.runtimeText = '(' + vm.episode.runtime + ')';\n            }   \n        }\n    }\n]);","angular.module('app').directive('focus', ['$timeout', '$parse', function($timeout, $parse) {\n        return {\n            restrict: 'A',\n            link: function($scope, element, attributes, controller) {\n                $scope.$watch(function() {\n                    return $scope.$eval(attributes.focus);\n                }, function(focus) {\n                    if (focus === true) {\n                        $timeout(function() {\n                            element[0].focus();\n                            getter = $parse(attributes.focus);\n                            //override the value with a false now that we have performed the focus\n                            getter.assign($scope, false);\n                        });\n                    }\n                });\n            }\n        }\n\n    }]);","angular.module('app').directive('jwplayer', ['uniqueId', function(uniqueId) {\n        return {\n            restrict: 'E',\n            replace: true,\n            controllerAs: 'vm',\n            controller: ['Video', '$scope', 'util', Controller],\n            bindToController: true,\n            scope: {\n                videoId: '='\n            },\n            link: function(scope, element, attributes, vm) {\n                vm.elementId = element.attr('id');\n                vm.playlist = [{file: 'http://localhost:8080/videos/movies/A%20Good%20Day%20to%20Die%20Hard/A%20Good%20Day%20to%20Die%20Hard.mp4'}];\n                if (!vm.elementId) {\n                    vm.elementId = uniqueId();\n                }\n\n                element.attr('id', vm.elementId);\n\n                //TODO - implement the keyboard shortcuts\n                function keyboardShortcuts(e) {\n                    switch (e.which) {\n                        case 32://spacebar key\n                            //toggle playback\n                            jwplayer().play();\n                            break;\n                        case 70: //f key\n                            //toggle fullscreen\n                            if (player.getFullscreen() === true) {\n                                player.setFullscreen(false);\n                            } else {\n                                player.setFullscreen(true);\n                            }\n                            break;\n                        case 39: //right arrow key\n                            //seek forward n seconds\n                            var position = player.getPosition();\n                            var newPosition = position + seekBurstSeconds;\n                            if (position <= seekPosition) {\n                                newPosition = seekPosition + seekBurstSeconds;\n                            }\n                            seekPosition = newPosition;\n                            player.seek(seekPosition);\n                            break;\n                        case 37: //left arrow key\n                            //seek backwards n seconds\n                            var position = player.getPosition();\n                            var newPosition = position - seekBurstSeconds;\n                            if (position >= seekPosition) {\n                                newPosition = seekPosition - seekBurstSeconds;\n                            }\n                            seekPosition = newPosition;\n                            player.seek(seekPosition);\n                            break;\n                    }\n                }\n            },\n            template: '<div class=\"jwplayer\"></div>'\n        }\n\n        function Controller(Video, $scope, util) {\n            var vm = this;\n            angular.extend(this,\n                    {\n                        play: play,\n                        pause: pause,\n                        playlist: [],\n                        loadVideo: loadVideo,\n                        togglePlayback: togglePlayback\n                    }\n            );\n            var startSeconds = 0;\n            //keeps track of the number of seconds that have passed since the video has saved its position in the database\n            var playPositionUpdateTime = new Date();\n\n            //load the video\n            Video.getById(vm.videoId).then(function(video) {\n                //get the current progress of this video.\n                Video.getProgress(vm.videoId).then(function(seconds) {\n                    vm.video = video;\n                    startSeconds = seconds;\n                });\n            });\n\n            $scope.$watch('vm.video', vm.loadVideo);\n\n            //when the directive is removed, remove the jwplayer from the page\n            $scope.$on('$destroy', function() {\n                jwplayer(vm.elementId).remove();\n            });\n\n            /**\n             * Toggles the play/pause state. if playing, the player pauses. if paused, the player plays.\n             */\n            function togglePlayback() {\n                vm.player.play();\n            }\n\n            /**\n             * Tells the player to play. If already playing, playback continues. \n             * if paused, the player starts playing.\n             */\n            function play() {\n                vm.player.play(true);\n            }\n\n            /**\n             * Pauses the player. If the player is playing, playback is paused. \n             * if the player is paused, the player stays paused.\n             */\n            function pause() {\n                vm.player.pause(false);\n            }\n\n            function loadVideo(video) {\n                //empty the playlist \n                util.blankItemInPlace(vm.playlist);\n                if (!video) {\n                    return;\n                }\n                //add the video to the playlist\n                vm.playlist.push({\n                    file: video.url,\n                    image: video.posterUrl,\n                    title: video.title,\n                    video: video\n                });\n\n                if (vm.jwplayer) {\n                    vm.player.load(vm.playlist);\n                } else {\n                    //the jwplayer has not yet been created, create it now\n                    jwplayer(vm.elementId).setup({\n                        flashplayer: 'lib/jwplayer-6.11/jwplayer.flash.swf',\n                        primary: 'html5',\n                        playlist: vm.playlist,\n                        startparam: 'start',\n                        wmode: 'transparent',\n                        width: '100%',\n                        height: '100%',\n                        events: {\n                            onTime: onTime,\n                            onPlay: onPlay,\n                            onComplete: onComplete\n                        },\n                        autostart: true\n                    });\n                    vm.player = jwplayer(vm.elementId);\n                }\n            }\n\n            var startVideoWhereWeLeftOffProcessed = false;\n            /**\n             * Event that is called every time the video changes time position. This may be called up to \n             * 10 times a second\n             */\n            function onTime(obj) {\n                if (startVideoWhereWeLeftOffProcessed === false && obj.position > 0) {\n                    startVideoWhereWeLeftOffProcessed = true;\n                    startVideoWhereWeLeftOff();\n                    return;\n                }\n\n                var positionInSeconds = obj.position;\n                //every so often, update the database with the current video's play position\n                var nowTime = new Date();\n                var timeSinceLastUpdate = nowTime - playPositionUpdateTime;\n                if (timeSinceLastUpdate > 5000) {\n                    playPositionUpdateTime = new Date();\n                    Video.setProgress(vm.video.videoId, positionInSeconds);\n                }\n            }\n            \n            function onComplete(){\n                console.debug('Finished playing video ' + vm.video.videoId);\n                Video.setProgress(vm.video.videoId, -1, true);\n            }\n\n            /**\n             * Seeks to the playback position indicated by the database. This should only be called ONCE, \n             * and only after the video has started playing\n             */\n            function startVideoWhereWeLeftOff() {\n                //seek the player to the startPosition\n                //if a startSeconds value greater than 0 was provided, seek to that position in the video\n                if (startSeconds > 0) {\n                    vm.player.seek(startSeconds);\n                    console.debug('seeking to ', startSeconds);\n                }\n            }\n\n            /**\n             * Event that is fired every time the video starts playing\n             */\n            function onPlay() {\n                playPositionUpdateTime = new Date();\n            }\n\n        }\n    }]);","angular.module('app').directive('videoTile', [function() {\n        return {\n            restrict: 'E',\n            controllerAs: 'vm',\n            controller: [Controller],\n            bindToController: true,\n            scope: {\n                video: '='\n            },\n            templateUrl: 'videoTileDirective.html'\n        }\n\n        function Controller() {\n            \n        }\n    }]);","angular.module('app').controller('AdminController', ['$timeout', '$window', 'globals', 'api', 'notify', 'Video', 'admin',\n    function($timeout, $window, globals, api, notify, Video, admin) {\n        globals.title = 'Admin';\n\n        var vm = angular.extend(this, {\n            //properties\n            serverVersionNumber: undefined,\n            //api\n            fetchMissingMetadata: fetchMissingMetadata,\n            generateLibrary: generateLibrary,\n            updateApplication: updateApplication\n        });\n\n\n        getVideoCounts();\n        getServerVersionNumber();\n\n        function generateLibrary() {\n            var n = notify('Generating library', 'info');\n            globals.generateLibraryIsPending = true;\n            api.generateLibrary().then(function() {\n                notify('Library has been generated', 'success');\n            }).catch(function(err) {\n                notify('There was an error generating the library: \"' + err.message + '\"', 'danger');\n            }).finally(function() {\n                globals.generateLibraryIsPending = false;\n                getVideoCounts();\n            });\n        }\n\n        function getServerVersionNumber() {\n            admin.getServerVersionNumber().then(function(version) {\n                vm.serverVersionNumber = version;\n            });\n        }\n        function getVideoCounts() {\n            Video.getCounts().then(function(videoCounts) {\n                vm.videoCounts = videoCounts;\n            });\n        }\n\n        function fetchMissingMetadata() {\n            globals.fetchMissingMetadataIsPending = true;\n            notify('Fetching missing metadata', 'info');\n            Video.fetchMissingMetadata().then(function() {\n                notify('Finished fetching missing metata for videos', 'success');\n            }, function() {\n                notify('There was an error fetching missing metadata', 'error');\n            }).finally(function() {\n                globals.fetchMissingMetadataIsPending = false;\n            });\n        }\n\n        function updateApplication() {\n            globals.checkForUpdatesIsPending = true;\n            notify('Checking for updates. Please wait until this operation has completed', 'info');\n            admin.updateApplication().then(function(result) {\n                if (result.updateWasApplied) {\n                    notify('Application has been updated. Reloading page.', 'success');\n                    $timeout(function() {\n                        $window.location.reload();\n                    }, 4000);\n                } else {\n                    notify('No updates were found', 'success');\n                }\n            }, function() {\n                notify('Unable to check and install updates', 'error');\n            }).finally(function() {\n                globals.checkForUpdatesIsPending = false;\n            });\n        }\n    }]);","angular.module('app').controller('BaseController', ['globals',function(globals) {\n        var vm = angular.extend(this, {\n            globals: globals\n        });\n        \n    }]);","angular.module('app').controller('EditVideoSourceController', [\n    '$scope', 'globals', 'VideoSource', '$state', '$stateParams', 'enums',\n    function($scope, globals, VideoSource, $state, $stateParams, enums) {\n        var vm = angular.extend(this, {\n            isLoading: false,\n            isSaving: false,\n            //properties\n            originalVideoSource: undefined,\n            videoSource: {\n                securityType: enums.securityType.public,\n            },\n            //api\n            reset: reset,\n            save: save,\n            sayHi: function() {\n                alert('hi');\n            }\n        });\n\n        globals.title = 'Edit Video Source';\n        vm.originalVideoSource = angular.copy(vm.videoSource);\n        loadVideoSource();\n\n        function loadVideoSource() {\n            //if an id was provided, go look up the settings for that videoSource\n            if ($stateParams.id && $stateParams.id > 0) {\n                vm.isLoading = true;\n                VideoSource.getById($stateParams.id).then(function(videoSource) {\n                    vm.videoSource = videoSource;\n                    vm.originalVideoSource = angular.copy(videoSource);\n                }).finally(function() {\n                    vm.isLoading = false;\n                });\n            }\n        }\n\n        function reset() {\n            vm.videoSource = vm.originalVideoSource;\n            vm.form.setPristine(true);\n        }\n\n        function save() {\n            vm.isSaving = true;\n            VideoSource.save(vm.videoSource).then(function(videoSource) {\n                vm.isSaving = false;\n                loadVideoSource();\n                notify('Saved video source', 'success');\n                $state.go('videoSources', {}, {reload: true});\n            }, function() {\n                //handle the error\n                vm.isSaving = false;\n            });\n        }\n    }]);","angular.module('app').controller('FetchByTitleController', ['$stateParams',\n    function($stateParams) {\n        var vm = angular.extend(this, {\n            //properties\n            title: undefined\n                    //api\n\n        });\n\n        vm.title = $stateParams.title;\n\n    }]);","angular.module('app').controller('HomeController', ['globals', 'Video', function(globals, Video) {\n        var vm = angular.extend(this, {\n            allVideos: [],\n            currentlyLoadedVideos: [],\n            //api\n            loadMore: loadMore\n        });\n        globals.title = 'Home';\n\n        Video.getAll().then(function(videos) {\n            vm.allVideos = videos;\n        });\n\n        function loadMore() {\n            var numberToLoad = globals.infiniteScrollPageSize;\n            var beginIndex = vm.currentlyLoadedVideos.length;\n            var endIndex = beginIndex + numberToLoad;\n            //if the end index is larger than the list of all videos, change the end index to the length of the list of all videos\n            endIndex = endIndex > vm.allVideos.length ? vm.allVideos.length : endIndex;\n\n            for (var i = beginIndex; i < endIndex; i++) {\n                vm.currentlyLoadedVideos.push(vm.allVideos[i]);\n            }\n        }\n\n    }]);","angular.module('app').controller('MetadataFetcherController', ['$scope', '$q', 'globals', 'refreshImage', 'Video', '$state', '$stateParams', 'notify', 'enums',\n    function($scope, $q, globals, refreshImage, Video, $state, $stateParams, notify, enums) {\n        globals.title = 'Fetch Metadata';\n        var vm = angular.extend(this, {\n            searchByOptions: {\n                onlineVideoId: 'onlineVideoId',\n                title: 'title'\n            },\n            videoId: $stateParams.videoId,\n            searchBy: 'onlineVideoId',\n            isSearching: false,\n            metadataIsBeingFetched: false,\n            textboxLabel: undefined,\n            //this is the value (title, onlineVideoId) to use to search for the metadata\n            searchValue: undefined,\n            searchResults: undefined,\n            video: {},\n            //api\n            search: search,\n            calculateTextboxLabel: calculateTextboxLabel,\n            fetchMetadataByOnlineVideoId: fetchMetadataByOnlineVideoId\n        });\n\n        $scope.$watch('vm.searchBy', searchByChanged);\n\n        $scope.$watch('vm.video', vm.calculateTextboxLabel);\n\n        function searchByChanged() {\n            vm.calculateTextboxLabel();\n            if (vm.searchBy === vm.searchByOptions.title) {\n                vm.searchValue = vm.video.title;\n            } else {\n                vm.searchValue = '';\n            }\n        }\n\n        function calculateTextboxLabel() {\n            vm.textboxLabel = undefined;\n\n            if (!vm.video) {\n                return;\n            }\n            if (vm.searchBy === vm.searchByOptions.title) {\n                vm.textboxLabel = 'Title';\n            } else {\n                vm.textboxLabel = vm.video.mediaType === enums.mediaTypeMovie ? 'TMDB ID' : 'TVDB ID';\n            }\n        }\n\n        //load the video\n        Video.getById(vm.videoId).then(function(video) {\n            angular.extend(vm.video, video);\n            searchByChanged()\n        });\n\n        Video.getPathInfo(vm.videoId).then(function(video) {\n            angular.extend(vm.video, video);\n        });\n\n        function search() {\n            vm.isSearching = true;\n            var promise;\n            if (vm.searchBy === vm.searchByOptions.title) {\n                promise = Video.getMetadataSearchResultsByTitle(vm.video.mediaType, vm.searchValue);\n            } else {\n                promise = Video.getMetadataSearchResultsByOnlineVideoId(vm.video.mediaType, vm.searchValue);\n            }\n            promise.then(function(searchResults) {\n                vm.metadataResults = searchResults;\n                vm.isSearching = false;\n            });\n        }\n\n        function fetchMetadataByOnlineVideoId(onlineVideoId) {\n            vm.metadataIsBeingFetched = true;\n            Video.fetchMetadata(vm.video.videoId, onlineVideoId).then(function() {\n                return Video.getById(vm.video.videoId);\n            }).then(function(video) {\n                //refresh the posters so that when we go back to videoInfo, the poster cache has been cleared\n                return refreshImage(video.sdPosterUrl).then(function() {\n                    return refreshImage(video.hdPosterUrl);\n                }).then(function(){\n                    //there was an issue getting the browser to refresh the cached images. try reloading the page (after we have \n                    //navigated to the videoInfo page)\n                    setTimeout(function(){\n                        window.location.reload();\n                    }, 200);\n                    return undefined;\n                });\n            }).then(function() {\n                vm.metadataResults = undefined;\n                vm.metadataIsBeingFetched = false;\n\n                notify('Updated video with selected metadata', 'success');\n                $state.go('videoInfo', {videoId: vm.videoId});\n            })['catch'](function(err) {\n                vm.metadataIsBeingFetched = false;\n                notify('There was an error fetching metadata for the video you selected: ' + err, 'error');\n            })\n        }\n\n\n    }]);","angular.module('app').controller('NavbarController', ['$state', function($state) {\n        var vm = angular.extend(this, {\n            searchTerm: undefined,\n            navbarIsOpen: false,\n            //api\n            search: search,\n            hideNavbar: hideNavbar,\n            toggleNavbar: toggleNavbar\n        });\n\n        function search() {\n            if (vm.searchTerm && vm.searchTerm.trim().length > 0) {\n                $state.go('search', {q: vm.searchTerm});\n                vm.searchTerm = undefined;\n                hideNavbar();\n            }\n        }\n\n        function showNavbar() {\n            vm.navbarIsOpen = true;\n        }\n\n        function hideNavbar() {\n            vm.navbarIsOpen = false;\n        }\n\n        function toggleNavbar() {\n            vm.navbarIsOpen ? hideNavbar() : showNavbar();\n        }\n\n    }]);","angular.module('app').controller('PlayController', ['$scope', 'globals', '$stateParams', 'notify',\n    function($scope, globals, $stateParams, notify) {\n        globals.title = 'Play';\n        globals.hideNavbar = true;\n        \n        var vm = angular.extend(this, {\n            videoId: $stateParams.videoId,\n            showVideoId: $stateParams.showVideoId\n        });\n\n        $scope.$on(\"$destroy\", function() {\n           globals.hideNavbar = false;\n        });\n    }]);","angular.module('app').controller('SearchController', ['globals', 'Video', '$stateParams', function(globals, Video, $stateParams) {\n        var vm = angular.extend(this, {\n            allVideos: [],\n            currentlyLoadedVideos: [],\n            searchTerm: $stateParams.q,\n            //api\n            loadMore: loadMore\n        });\n\n        globals.title = 'Home';\n        var searchTerm = $stateParams.q;\n\n        Video.search(searchTerm).then(function(videos) {\n            vm.allVideos = videos;\n        });\n\n\n        function loadMore() {\n            var numberToLoad = globals.infiniteScrollPageSize;\n            var beginIndex = vm.currentlyLoadedVideos.length;\n            var endIndex = beginIndex + numberToLoad;\n            //if the end index is larger than the list of all videos, change the end index to the length of the list of all videos\n            endIndex = endIndex > vm.allVideos.length ? vm.allVideos.length : endIndex;\n\n            for (var i = beginIndex; i < endIndex; i++) {\n                var video = vm.allVideos[i];\n                vm.currentlyLoadedVideos.push(video);\n            }\n        }\n\n    }]);","angular.module('app').controller('VideoInfoController', ['$scope', 'globals', 'Video', '$state', '$stateParams', 'enums',\n    function($scope, globals, Video,$state,  $stateParams, enums) {\n        var vm = angular.extend(this, {\n            progressPercent: 0,\n            preventCache: $stateParams.preventCache,\n            episodes: undefined,\n            videoId: $stateParams.videoId,\n            //api\n            getProgressPercentType: getProgressPercentType,\n            navigateToShow: navigateToShow\n        });\n        globals.title = 'VideoInfo';\n\n        $scope.$watch('vm.episodes', fetchAllEpisodePercentWatched);\n\n        //load the video by id\n        Video.getById(vm.videoId).then(function(video) {\n            vm.video = video;\n\n            if (vm.video.mediaType === enums.mediaType.show) {\n                //get all of the episodes for this show\n                Video.getEpisodes(vm.video.videoId).then(function(episodes) {\n                    vm.episodes = episodes;\n                    //find the next episode that should be watched\n                }).then(function() {\n                    return Video.getNextEpisode(vm.video.videoId);\n                    //select the episode in our local list of episodes that matches the next episode\n                }).then(function(nextEpisode) {\n                    vm.nextEpisode = _.where(vm.episodes, {videoId: nextEpisode.videoId})[0];\n                    //figure out how much of this episode has been watched\n                }).then(function() {\n                    return Video.getProgressPercent(vm.nextEpisode.videoId);\n                    //save the percentWatched to the episode\n                }).then(function(percent) {\n                    vm.nextEpisode.percentWatched = percent;\n                });\n            }\n\n            //load the progress of this video\n            Video.getProgressPercent(vm.video.videoId).then(function(percent) {\n                vm.progressPercent = percent;\n            });\n\n        })\n\n        /**\n         * Grabs the percent watched for every episode\n         * @returns {undefined}\n         */\n        function fetchAllEpisodePercentWatched() {\n            var videoIds = _.pluck(vm.episodes, 'videoId');\n            Video.getProgressPercentMultiple(videoIds).then(function(percentObjects) {\n                for (var i in percentObjects) {\n                    var percentObj = percentObjects[i];\n                    var episode = _.where(vm.episodes, {videoId: percentObj.videoId})[0];\n                    if (episode) {\n                        episode.percentWatched = percentObj.percent;\n                    }\n                }\n            });\n        }\n\n        function getProgressPercentType() {\n            if (vm.progressPercent < 40) {\n                return'danger';\n            } else if (vm.progressPercent < 99) {\n                return 'warning';\n            } else if (vm.progressPercent < 101) {\n                return 'success';\n            }\n        }\n\n        function navigateToShow() {\n            Video.getShowFromEpisodeId(vm.videoId).then(function(show) {\n                $state.go('videoInfo', {videoId: show.videoId});\n            });\n        }\n    }]);","angular.module('app').controller('VideoSourcesController', ['globals', 'VideoSource', 'notify',\n    function(globals, VideoSource, notify) {\n        var vm = this;\n        vm.editIsVisible = false;\n        vm.deleteVideoSource = deleteVideoSource;\n        vm.refresh = loadVideoSources;\n\n        globals.title = 'Video Sources';\n        loadVideoSources();\n        \n        function loadVideoSources() {\n            VideoSource.getAll().then(function(videoSources) {\n                vm.videoSources = videoSources;\n            });\n        }\n\n        function deleteVideoSource(id) {\n            VideoSource.deleteById(id).then(loadVideoSources);\n        }\n    }]);","angular.module('app').service('admin', ['$http', '$q', '_', function($http, $q, _) {\n        return {\n            getServerVersionNumber: getServerVersionNumber,\n            updateApplication: updateApplication\n        };\n\n        /**\n         * Finds a poster and metadata for every video in the library that does not have one yet.\n         * @returns {$q@call;defer.promise}\n         */\n        function getServerVersionNumber() {\n            var deferred = $q.defer();\n            $http.get('api/GetServerVersionNumber.php')\n                    .success(function(result) {\n                        deferred.resolve(result);\n                    })\n                    .error(function() {\n                        deferred.reject();\n                    });\n            return deferred.promise;\n        }\n\n        /**\n         * Checks for updates to this application and updates if there are any.\n         * @returns {undefined}\n         */\n        function updateApplication() {\n            var deferred = $q.defer();\n            $http.get('api/Update.php')\n                    .success(function(result) {\n                        if (result.success === true) {\n                            deferred.resolve(result);\n                        } else {\n                            deferred.reject(result);\n                        }\n                    })\n                    .error(function(err) {\n                        deferred.reject(err);\n                    });\n            return deferred.promise;\n        }\n    }]);","angular.module('app').service('api', ['$q', '$http', function($q, $http) {\n        return {\n            generateLibrary: generateLibrary\n        };\n\n        function generateLibrary() {\n            return $q(function(resolve, reject) {\n                $http.get('api/GenerateLibrary.php')\n                        .success(function(result) {\n                            if (result.success) {\n                                resolve();\n                            } else {\n                                reject();\n                            }\n                        })\n                        .error(function() {\n                            reject();\n                        })\n\n            });\n        }\n    }]);","angular.module('app').service('globals', [function() {\n        return {\n            pageTitle: 'PlumMediaCenter',\n            hideNavbar: false,\n            infiniteScrollPageSize: 25,\n            //whenever the admin page launches a metadata fetch, keep track of its status here. \n            fetchMissingMetadataIsPending: false,\n            generateLibraryIsPending: false,\n            checkForUpdatesIsPending: false\n        };\n    }]);","angular.module('app').service('_', function(){\n    return window._;\n});","/**\n * Takes an image url and refreshes that image so that the browser cache can be refreshed\n * @param {type} param1\n * @param {type} param2\n */\nangular.module('app').service('refreshImage', ['$q', function($q) {\n        function refreshImage(uri) {\n            var deferred = $q.defer();\n            var reload = function() {\n                // Force a reload of the iframe\n                this.contentWindow.location.reload(true);\n\n                // Remove `load` event listener and remove iframe\n                this.removeEventListener('load', reload, false);\n                this.parentElement.removeChild(this);\n\n               deferred.resolve();\n            };\n\n            var iframe = document.createElement('iframe');\n            iframe.style.display = 'none';\n\n            // Reload iframe once it has loaded\n            iframe.addEventListener('load', reload, false);\n\n            // Only call callback if error occured while loading\n            iframe.addEventListener('error', deferred.reject, false);\n            iframe.src = uri;\n            document.body.appendChild(iframe);\n            return deferred.promise;\n        }\n\n        return refreshImage;\n    }]);","angular.module('app').service('uniqueId', [function() {\n        var counter = 0;\n        return function() {\n            counter++;\n            return 'element-' + counter;\n        }\n    }]);","angular.module('app').service('util', ['_', function(_) {\n        return {\n            blankItemInPlace: blankItemInPlace\n        };\n\n        function blankItemInPlace(item) {\n            if (_.isArray(item)) {\n                while (item.length > 0) {\n                    item.pop();\n                }\n            } else {\n                for (var i in item) {\n                    delete item[i];\n                }\n            }\n        }\n    }]);","angular.module('app').service('Video', ['$http', '$q', '_', function($http, $q, _) {\n        function Video() {\n\n        }\n\n        Video.search = function(searchTerm) {\n            var deferred = $q.defer();\n            $http.get('api/GetSearchResults.php', {params: {q: searchTerm}}).success(function(data) {\n                deferred.resolve(data);\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        Video.getAll = function() {\n            return $q(function(resolve, reject) {\n                $http.get('api/GetLibrary.php').success(function(data) {\n                    resolve(data);\n                });\n            });\n        };\n\n        Video.getById = function(id) {\n            var deferred = $q.defer();\n            if (!_.isNumber(id)) {\n                deferred.reject();\n            } else {\n                $http.get('api/GetVideo.php?videoId=' + id).success(function(data) {\n                    deferred.resolve(data);\n                }).error(function() {\n                    deferred.reject(data);\n                });\n            }\n            return deferred.promise;\n        };\n\n        Video.getEpisodes = function(showId) {\n            var deferred = $q.defer();\n            $http.get('api/GetTvEpisodes.php?videoId=' + showId).success(function(data) {\n                deferred.resolve(data);\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        Video.getNextEpisode = function(showId) {\n            var deferred = $q.defer();\n            $http.get('api/GetNextEpisode.php?videoId=' + showId).success(function(data) {\n                deferred.resolve(data);\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        /**\n         * Get how much percentage watched this video is\n         * @param {type} videoId\n         * @returns {$q@call;defer.promise}\n         */\n        Video.getProgressPercent = function(videoId) {\n            var deferred = $q.defer();\n            $http.get('api/GetVideoProgressPercent.php', {params: {videoId: videoId}})\n                    .success(function(result) {\n                        deferred.resolve(result.percent);\n                    })\n                    .error(deferred.reject);\n            return deferred.promise;\n        };\n\n        /**\n         * Get how much percentage watched each video is\n         * @param {type} videoId\n         * @returns {$q@call;defer.promise}\n         */\n        Video.getProgressPercentMultiple = function(videoIds) {\n            videoIds = _.isArray(videoIds) ? videoIds : [];\n            var deferred = $q.defer();\n            $http.get('api/GetVideoProgressPercentMultiple.php', {\n                params: {\n                    videoIds: videoIds.join(',')\n                }\n            }).success(function(result) {\n                deferred.resolve(result);\n            }).error(deferred.reject);\n            return deferred.promise;\n        };\n\n        /**\n         * Get the number of seconds into a video the current user is. \n         * @param {type} videoId\n         * @returns {$q@call;defer.promise}\n         */\n        Video.getProgress = function(videoId) {\n            var deferred = $q.defer();\n            $http.get('api/GetVideoProgress.php', {params: {\n                    videoId: videoId\n                }}).success(function(data) {\n                deferred.resolve(data.startSeconds);\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        }\n\n        Video.setProgress = function(videoId, seconds, isFinished) {\n            isFinished = isFinished === true ? true : false;\n\n            var deferred = $q.defer();\n            $http.get('api/SetVideoProgress.php', {params: {\n                    videoId: videoId,\n                    seconds: seconds,\n                    finished: isFinished\n                }}).success(function(data) {\n                if (data.success) {\n                    deferred.resolve();\n                } else {\n                    deferred.reject();\n                }\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        }\n\n        Video.getCounts = function() {\n            var deferred = $q.defer();\n            $http.get('api/GetVideoCounts.php').success(function(data) {\n                deferred.resolve(data);\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        Video.fetchMetadata = function(videoId, onlineVideoId) {\n            var deferred = $q.defer();\n            $http.get('api/FetchVideoMetadata.php', {params: {videoId: videoId, onlineVideoId: onlineVideoId}}).success(function(data) {\n                deferred.resolve(data);\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        Video.getMetadataSearchResultsByTitle = function(mediaType, title) {\n            var deferred = $q.defer();\n            $http.get('api/GetMetadataSearchResults.php', {\n                params: {\n                    mediaType: mediaType,\n                    title: title\n                }\n            }).success(function(data) {\n                deferred.resolve(data);\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        }\n        Video.getMetadataSearchResultsByOnlineVideoId = function(mediaType, onlineVideoId) {\n            var deferred = $q.defer();\n            $http.get('api/GetMetadataSearchResults.php', {\n                params: {\n                    mediaType: mediaType,\n                    onlineVideoId: onlineVideoId\n                }\n            }).success(function(data) {\n                deferred.resolve(data);\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        }\n\n        Video.getPathInfo = function(videoId) {\n            var deferred = $q.defer();\n            $http.get('api/GetVideoPathInfo.php?videoId=' + videoId)\n                    .success(function(video) {\n                        deferred.resolve(video);\n                    })\n                    .error(function() {\n                        deferred.reject();\n                    });\n            return deferred.promise;\n        }\n\n        Video.getShowFromEpisodeId = function(episodeId) {\n            var deferred = $q.defer();\n            $http.get('api/GetTvShowByEpisodeId.php?videoId=' + episodeId)\n                    .success(function(video) {\n                        deferred.resolve(video);\n                    })\n                    .error(function() {\n                        deferred.reject();\n                    });\n            return deferred.promise;\n        }\n\n        /**\n         * Finds a poster and metadata for every video in the library that does not have one yet.\n         * @returns {$q@call;defer.promise}\n         */\n        Video.fetchMissingMetadata = function() {\n            var deferred = $q.defer();\n            $http.get('api/FetchMissingMetadataAndPosters.php')\n                    .success(function(result) {\n                        deferred.resolve(result);\n                    })\n                    .error(function() {\n                        deferred.reject();\n                    });\n            return deferred.promise;\n        }\n        return Video;\n    }]);","angular.module('app').service('VideoSource', ['$http', '$q', function($http, $q) {\n        function VideoSource() {\n\n        }\n\n        VideoSource.getAll = function() {\n            var deferred = $q.defer();\n            $http.get('api/GetVideoSources.php').success(function(data) {\n                deferred.resolve(data);\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        VideoSource.getById = function(id) {\n            var deferred = $q.defer();\n            $http.get('api/GetVideoSourceById.php?id=' + id).success(function(data) {\n                deferred.resolve(data);\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        VideoSource.save = function(videoSource) {\n            return $q(function(resolve, reject) {\n                $http.post('api/PostVideoSource.php', videoSource).then(function(result) {\n                    resolve(result.data);\n                }, reject);\n            });\n        };\n\n        VideoSource.deleteById = function(id) {\n            return $q(function(resolve, reject) {\n                $http.delete('api/DeleteVideoSource.php', {data: {id: id}}).then(function(result) {\n                    resolve(result.data);\n                }, reject);\n            });\n        };\n\n        return VideoSource;\n    }]);","angular.module('app').directive('pathExistsValidator', function($http, $q) {\n    return {\n        require: 'ngModel',\n        link: function(scope, element, attrs, ngModel) {\n            ngModel.$asyncValidators.pathExists = function(modelValue, viewValue) {\n                var value = modelValue || viewValue;\n                return $http.get('api/GetPathExistsOnServer.php', {params: {path: value}}).then(\n                        function(response) {\n                            if (!response.data.exists === true) {\n                                return $q.reject(response.data.errorMessage);\n                            }\n                            return true;\n                        }\n                );\n            };\n        }\n    };\n});","angular.module('app').directive('urlExistsValidator', function($http, $q) {\n    return {\n        require: 'ngModel',\n        link: function(scope, element, attrs, ngModel) {\n            ngModel.$asyncValidators.urlExists = function(modelValue, viewValue) {\n                var value = modelValue || viewValue;\n                return $http.get('api/GetUrlExists.php', {params: {url: value}}).then(\n                        function(response) {\n                            if (!response.data.exists === true) {\n                                return $q.reject(response.data.errorMessage);\n                            }\n                            return true;\n                        }\n                );\n            };\n        }\n    };\n});"],"sourceRoot":"/source/"}