{"version":3,"sources":["app.js","routes.js","components/loadMessage.js","routes/BaseController.js","directives/confirmDirective.js","directives/focusDirective.js","services/adminService.js","services/apiService.js","services/debounceFactory.js","services/globalsService.js","services/libs.js","services/notifyService.js","services/refreshImageService.js","services/uniqueIdService.js","services/util.js","services/VideoService.js","services/VideoSourceService.js","validators/pathExistsValidator.js","validators/urlExistsValidator.js","components/categoryScroller/categoryScroller.js","components/categoryScrollerCollection/categoryScrollerCollection.js","components/episode/episode.js","components/navbar/navbar.js","components/videoPlayer/videoPlayer.js","components/videoTile/videoTile.js","routes/addNewMediaItem/addNewMediaItem.js","routes/admin/admin.js","routes/categories/categories.js","routes/editVideoSource/editVideoSource.js","routes/fetchByTitle/fetchByTitle.js","routes/home/home.js","routes/metadataFetcher/metadataFetcher.js","routes/play/play.js","routes/search/search.js","routes/videoInfo/videoInfo.js","routes/videoSources/videoSources.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzfjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.min.js","sourcesContent":["angular.module('app', ['ui.router', 'ui.bootstrap', 'infinite-scroll', 'ngTouch', 'ngAnimate'])\n    .run(['$rootScope', 'enums', 'globals', function ($rootScope, enums, globals) {\n        $rootScope.enums = enums;\n        $rootScope.globals = globals;\n    }]);\n\nfetchConstants().then(bootstrapApplication);\n\n\n/**\n * Load constants asynchronously BEFORE bootstrapping the application\n * @returns {unresolved}\n */\nfunction fetchConstants() {\n    var injector = angular.injector([\"ng\"])\n    var $http = injector.get(\"$http\");\n    var $q = injector.get('$q');\n\n    var promises = [\n        $q(function (resolve, reject) {\n            $http.get('api/GetEnumerations.php').then(function (result) {\n                angular.module('app').constant(\"enums\", result.data);\n                resolve();\n            }, reject);\n        })\n    ];\n\n    return $q.all(promises);\n}\n\nfunction bootstrapApplication() {\n    angular.element(document).ready(function () {\n        angular.bootstrap(document, [\"app\"]);\n    });\n}","angular.module('app')\r\n    .config(['$stateProvider', '$urlRouterProvider',\r\n        function ($stateProvider, $urlRouterProvider) {\r\n            $urlRouterProvider.otherwise('/home');\r\n\r\n            $stateProvider\r\n                .state('addNewMediaItem', {\r\n                    url: '/addNewMediaItem',\r\n                    templateUrl: '/addNewMediaItem.html',\r\n                    controller: 'AddNewMediaItemController',\r\n                    controllerAs: 'vm'\r\n                })\r\n                .state('home', {\r\n                    url: '/home',\r\n                    templateUrl: '/home.html',\r\n                    controller: 'HomeController',\r\n                    controllerAs: 'vm'\r\n                })\r\n                .state('categories', {\r\n                    url: '/categories/:categoryName',\r\n                    templateUrl: '/categories.html',\r\n                    controller: 'CategoriesController',\r\n                    controllerAs: 'vm'\r\n                })\r\n                .state('admin', {\r\n                    url: '/admin',\r\n                    templateUrl: '/admin.html',\r\n                    controller: 'AdminController',\r\n                    controllerAs: 'vm'\r\n                })\r\n                .state('videoInfo', {\r\n                    url: '/videoInfo/{videoId:int}',\r\n                    templateUrl: '/videoInfo.html',\r\n                    controller: 'VideoInfoController',\r\n                    controllerAs: 'vm'\r\n                })\r\n                .state('videoSources', {\r\n                    url: '/videoSources',\r\n                    templateUrl: '/videoSources.html',\r\n                    controller: 'VideoSourcesController',\r\n                    controllerAs: 'vm'\r\n                })\r\n                .state('editVideoSource', {\r\n                    url: '/editVideoSource/{id:int}',\r\n                    parent: 'videoSources',\r\n                    templateUrl: '/editVideoSource.html',\r\n                    controller: 'EditVideoSourceController',\r\n                    controllerAs: 'vm'\r\n                })\r\n                .state('play', {\r\n                    url: '/play/{videoId:int}?{showVideoId:int}',\r\n                    templateUrl: '/play.html',\r\n                    controller: 'PlayController',\r\n                    controllerAs: 'vm'\r\n                })\r\n                .state('search', {\r\n                    url: '/search?q',\r\n                    templateUrl: '/search.html',\r\n                    controller: 'SearchController',\r\n                    controllerAs: 'vm'\r\n                })\r\n                .state('metadataFetcher', {\r\n                    url: '/metadataFetcher/{videoId:int}',\r\n                    templateUrl: '/metadataFetcher.html',\r\n                    controller: 'MetadataFetcherController',\r\n                    controllerAs: 'vm'\r\n                })\r\n        }])\r\n\r\n    .run(['$rootScope', '$state', '$stateParams', function ($rootScope, $state, $stateParams) {\r\n        $rootScope.$state = $state;\r\n        $rootScope.$stateParams = $stateParams;\r\n    }])","angular.module('app').directive('loadMessage', [function () {\n    'use strict';\n    return {\n        restrict: 'E',\n        scope: {\n            message: '='\n        },\n        template: '<span ng-show=\"message !== undefined\"><span class=\"wait-small\"></span>&nbsp;{{message}}</span>'\n    };\n}]);","angular.module('app').controller('BaseController', ['globals',function(globals) {\n        var vm = angular.extend(this, {\n            globals: globals\n        });\n        \n    }]);","angular.module('app').directive('confirm', [function() {\n        return {\n            restrict: 'A',\n            link: function(scope, element, attributes, controller) {\n                element.on('click', function() {\n                    var message = scope.$eval(attributes.confirmMessage);\n                    message = message? message: 'Are you sure you want to do that?';\n                    //show the confirm modal\n                    var confirmed = confirm(message);\n                    if (confirmed) {\n                        scope.$eval(attributes.confirm);\n                    }\n                });\n            }\n        }\n\n    }]);","angular.module('app').directive('focus', ['$timeout', '$parse', function($timeout, $parse) {\n        return {\n            restrict: 'A',\n            link: function($scope, element, attributes, controller) {\n                $scope.$watch(function() {\n                    return $scope.$eval(attributes.focus);\n                }, function(focus) {\n                    if (focus === true) {\n                        $timeout(function() {\n                            element[0].focus();\n                            getter = $parse(attributes.focus);\n                            //override the value with a false now that we have performed the focus\n                            getter.assign($scope, false);\n                        });\n                    }\n                });\n            }\n        }\n\n    }]);","angular.module('app').service('admin', ['$http', '$q', '_', function($http, $q, _) {\n        return {\n            getServerVersionNumber: getServerVersionNumber,\n            updateApplication: updateApplication\n        };\n\n        /**\n         * Finds a poster and metadata for every video in the library that does not have one yet.\n         * @returns {$q@call;defer.promise}\n         */\n        function getServerVersionNumber() {\n            var deferred = $q.defer();\n            $http.get('api/GetServerVersionNumber.php')\n                    .success(function(result) {\n                        deferred.resolve(result);\n                    })\n                    .error(function() {\n                        deferred.reject();\n                    });\n            return deferred.promise;\n        }\n\n        /**\n         * Checks for updates to this application and updates if there are any.\n         * @returns {undefined}\n         */\n        function updateApplication() {\n            var deferred = $q.defer();\n            $http.get('api/Update.php')\n                    .success(function(result) {\n                        if (result.success === true) {\n                            deferred.resolve(result);\n                        } else {\n                            deferred.reject(result);\n                        }\n                    })\n                    .error(function(err) {\n                        deferred.reject(err);\n                    });\n            return deferred.promise;\n        }\n    }]);","angular.module('app').service('api', ['$q', '$http', function ($q, $http) {\r\n    return {\r\n        generateLibrary: function () {\r\n            return $http.get('api/GenerateLibrary.php').then(function (response) {\r\n                return response.data;\r\n            });\r\n        }\r\n    };\r\n}]);","angular.module('app').factory('debounce', ['$rootScope', function ($rootScope) {\n\n        var registry = [];\n\n        function registryIndexOf(identifier) {\n            for (var i in registry) {\n                var registryItem = registry[i];\n                if (registryItem.identifier === identifier) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n\n        function getFromRegistry(identifier) {\n            var idx = registryIndexOf(identifier);\n            return registry[idx];\n        }\n\n        function setRegistryItem(identifier, callback, expirationMilliseconds) {\n            var registryItemIndex = registryIndexOf(identifier);\n            var registryItem;\n            //if there is no item in the registry with this identifier, make a new item\n            if (registryItemIndex === -1) {\n                registryItem = {\n                    identifier: identifier,\n                    callback: callback,\n                    expirationDate: undefined\n                };\n            } else {\n                //get the item from the registry\n                registryItem = registry[registryItemIndex];\n            }\n\n            registryItem.expirationDate = new Date(Date.now() + expirationMilliseconds);\n\n            if (registryItemIndex === -1) {\n                registry.push(registryItem);\n            }\n            return registryItem;\n        }\n\n        function debounce(identifier, callback, expirationMilliseconds) {\n            expirationMilliseconds = typeof expirationMilliseconds === 'number' ? expirationMilliseconds : 300;\n\n            var registryItem = setRegistryItem(identifier, callback, expirationMilliseconds);\n\n\n            //set a timeout and then see if the debounce has expired yet\n            setTimeout(function () {\n                if (registryItem.expirationDate < Date.now()) {\n                    //the debounce has expired. call the callback\n                    try {\n                        $rootScope.$apply(function () {\n                            registryItem.callback();\n                        });\n                    } catch (e) {\n                    }\n                    try {\n                        //remove this item from the registry\n                        registry.splice(registry.indexOf(registryItem), 1);\n                    } catch (e) {\n\n                    }\n                } else {\n                    //do nothing. something else has bumped the expiration date, so let that one's timeout handle it\n                }\n            }, expirationMilliseconds + 5);\n        }\n        return debounce;\n    }\n]);","angular.module('app').service('globals', [function() {\n        return {\n            pageTitle: 'PlumMediaCenter',\n            hideNavbar: false,\n            infiniteScrollPageSize: 25,\n            //whenever the admin page launches a metadata fetch, keep track of its status here. \n            fetchMissingMetadataIsPending: false,\n            generateLibraryIsPending: false,\n            checkForUpdatesIsPending: false\n        };\n    }]);","angular.module('app').service('_', function(){\n    return window._;\n});","angular.module('app').service('notify', function() {\n    return notify;\n});\n\n function notify(message, type) {\n        type = type ? type : 'warning';\n        //if danger was provided, convert to error\n        type = type === 'danger' ? 'error' : type;\n        \n        return new PNotify({\n            title: '',\n            text: message,\n            styling: 'bootstrap3',\n            type: type,\n            buttons: {\n                closer: true\n            }\n        });\n    }","/**\n * Takes an image url and refreshes that image so that the browser cache can be refreshed\n * @param {type} param1\n * @param {type} param2\n */\nangular.module('app').service('refreshImage', ['$q', function ($q) {\n    return function (uri) {\n        var deferred = $q.defer();\n        //create an iframe\n        var iframe = document.createElement('iframe');\n        iframe.style.display = 'none';\n        //set the url for the image\n        iframe.src = uri;\n\n        //listen for the iframe to load or error\n        iframe.addEventListener('load', onload, false);\n        iframe.addEventListener('error', onerror, false);\n\n        try {\n            //add the iframe to the page\n            document.body.appendChild(iframe);\n        } catch (e) {\n            onerror(e);\n        }\n\n        return deferred.promise;\n\n        function onload() {\n            cleanUp();\n            deferred.resolve();\n        }\n\n        function onerror(e) {\n            cleanUp()\n            console.error('Error refreshing image', e);\n            deferred.reject(e);\n        }\n\n        function cleanUp() {\n            iframe.removeEventListener('load', onload, false);\n            iframe.removeEventListener('error', onerror, false);\n            document.body.removeChild(iframe);\n        }\n\n    }\n}]);","angular.module('app').service('uniqueId', [function() {\n        var counter = 0;\n        return function() {\n            counter++;\n            return 'element-' + counter;\n        }\n    }]);","angular.module('app').service('util', ['_', function(_) {\n        return {\n            blankItemInPlace: blankItemInPlace\n        };\n\n        function blankItemInPlace(item) {\n            if (_.isArray(item)) {\n                while (item.length > 0) {\n                    item.pop();\n                }\n            } else {\n                for (var i in item) {\n                    delete item[i];\n                }\n            }\n        }\n    }]);","angular.module('app').service('Video', ['$http', '$q', '_', function ($http, $q, _) {\n    function Video() {\n\n    }\n\n    Video.search = function (searchTerm) {\n        var deferred = $q.defer();\n        $http.get('api/GetSearchResults.php', { params: { q: searchTerm } }).success(function (data) {\n            deferred.resolve(data);\n        }).error(function () {\n            deferred.reject();\n        });\n        return deferred.promise;\n    };\n\n    Video.getAll = function () {\n        return $q(function (resolve, reject) {\n            $http.get('api/GetLibrary.php').success(function (data) {\n                resolve(data);\n            });\n        });\n    };\n\n    Video.getById = function (id) {\n        var deferred = $q.defer();\n        if (!_.isNumber(id)) {\n            deferred.reject();\n        } else {\n            $http.get('api/GetVideo.php?videoId=' + id).success(function (data) {\n                deferred.resolve(data);\n            }).error(function () {\n                deferred.reject(data);\n            });\n        }\n        return deferred.promise;\n    };\n\n    Video.getEpisodes = function (showId) {\n        var deferred = $q.defer();\n        $http.get('api/GetTvEpisodes.php?videoId=' + showId).success(function (data) {\n            deferred.resolve(data);\n        }).error(function () {\n            deferred.reject();\n        });\n        return deferred.promise;\n    };\n\n    Video.getNextEpisode = function (showId) {\n        var deferred = $q.defer();\n        $http.get('api/GetNextEpisode.php?videoId=' + showId).success(function (data) {\n            deferred.resolve(data);\n        }).error(function () {\n            deferred.reject();\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Get how much percentage watched this video is\n     * @param {type} videoId\n     * @returns {$q@call;defer.promise}\n     */\n    Video.getProgressPercent = function (videoId) {\n        var deferred = $q.defer();\n        $http.get('api/GetVideoProgressPercent.php', { params: { videoId: videoId } })\n            .success(function (result) {\n                deferred.resolve(result.percent);\n            })\n            .error(deferred.reject);\n        return deferred.promise;\n    };\n\n    /**\n     * Get how much percentage watched each video is\n     * @param {type} videoId\n     * @returns {$q@call;defer.promise}\n     */\n    Video.getProgressPercentMultiple = function (videoIds) {\n        videoIds = _.isArray(videoIds) ? videoIds : [];\n        var deferred = $q.defer();\n        $http.get('api/GetVideoProgressPercentMultiple.php', {\n            params: {\n                videoIds: videoIds.join(',')\n            }\n        }).success(function (result) {\n            deferred.resolve(result);\n        }).error(deferred.reject);\n        return deferred.promise;\n    };\n\n    /**\n     * Get the number of seconds into a video the current user is. \n     * @param {type} videoId\n     * @returns {$q@call;defer.promise}\n     */\n    Video.getProgress = function (videoId) {\n        var deferred = $q.defer();\n        $http.get('api/GetVideoProgress.php', {\n            params: {\n                videoId: videoId\n            }\n        }).success(function (data) {\n            deferred.resolve(data.startSeconds);\n        }).error(function () {\n            deferred.reject();\n        });\n        return deferred.promise;\n    }\n\n    Video.setProgress = function (videoId, seconds, isFinished) {\n        isFinished = isFinished === true ? true : false;\n\n        var deferred = $q.defer();\n        $http.get('api/SetVideoProgress.php', {\n            params: {\n                videoId: videoId,\n                seconds: seconds,\n                finished: isFinished\n            }\n        }).success(function (data) {\n            if (data.success) {\n                deferred.resolve();\n            } else {\n                deferred.reject();\n            }\n        }).error(function () {\n            deferred.reject();\n        });\n        return deferred.promise;\n    }\n\n    Video.getCounts = function () {\n        var deferred = $q.defer();\n        $http.get('api/GetVideoCounts.php').success(function (data) {\n            deferred.resolve(data);\n        }).error(function () {\n            deferred.reject();\n        });\n        return deferred.promise;\n    };\n\n    Video.fetchMetadata = function (videoId, tmdbId) {\n        var deferred = $q.defer();\n        $http.get('api/FetchVideoMetadata.php', { params: { videoId: videoId, tmdbId: tmdbId } }).success(function (data) {\n            deferred.resolve(data);\n        }).error(function () {\n            deferred.reject();\n        });\n        return deferred.promise;\n    };\n\n    Video.getMetadataSearchResultsByTitle = function (mediaType, title) {\n        var deferred = $q.defer();\n        $http.get('api/GetMetadataSearchResults.php', {\n            params: {\n                mediaType: mediaType,\n                title: title\n            }\n        }).success(function (data) {\n            deferred.resolve(data);\n        }).error(function () {\n            deferred.reject();\n        });\n        return deferred.promise;\n    }\n\n    Video.scanForNewMedia = function (videoId) {\n        var deferred = $q.defer();\n        $http.get('api/ScanForNewMedia.php', {\n            params: {\n                videoId: videoId\n            }\n        }).then(function (result) {\n            deferred.resolve(result.data);\n        }, function (err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    }\n\n    Video.getMetadataSearchResultsBytmdbId = function (mediaType, tmdbId) {\n        var deferred = $q.defer();\n        $http.get('api/GetMetadataSearchResults.php', {\n            params: {\n                mediaType: mediaType,\n                tmdbId: tmdbId\n            }\n        }).success(function (data) {\n            deferred.resolve(data);\n        }).error(function () {\n            deferred.reject();\n        });\n        return deferred.promise;\n    }\n\n    Video.getPathInfo = function (videoId) {\n        var deferred = $q.defer();\n        $http.get('api/GetVideoPathInfo.php?videoId=' + videoId)\n            .success(function (video) {\n                deferred.resolve(video);\n            })\n            .error(function () {\n                deferred.reject();\n            });\n        return deferred.promise;\n    }\n\n    Video.getShowFromEpisodeId = function (episodeId) {\n        var deferred = $q.defer();\n        $http.get('api/GetTvShowByEpisodeId.php?videoId=' + episodeId)\n            .success(function (video) {\n                deferred.resolve(video);\n            })\n            .error(function () {\n                deferred.reject();\n            });\n        return deferred.promise;\n    }\n\n    /**\n     * Finds a poster and metadata for every video in the library that does not have one yet.\n     * @returns {$q@call;defer.promise}\n     */\n    Video.fetchMissingMetadata = function () {\n        var deferred = $q.defer();\n        $http.get('api/FetchMissingMetadataAndPosters.php')\n            .success(function (result) {\n                deferred.resolve(result);\n            })\n            .error(function () {\n                deferred.reject();\n            });\n        return deferred.promise;\n    }\n\n    Video.addNewMediaItem = function (videoSourceId, newMediaItemPath) {\n        return $http.get('api/AddNewMediaItem.php', { params: { videoSourceId: videoSourceId, path: newMediaItemPath } }).then(function (result) {\n            return result.data;\n        }, function (error) {\n            return error;\n        });\n    };\n\n\n    Video.getCategoryNames = function () {\n        return $http.get('api/GetCategoryNames.php').then(function (result) {\n            return result.data;\n        }, function (error) {\n            return error;\n        });\n    };\n\n    Video.getCategories = function (names) {\n        names = typeof names !== 'string' && typeof names.length === 'number' ? names : [];\n        properties = ['videoId', 'posterModifiedDate', 'title', 'hdPosterUrl'];\n\n        return $http.get('api/GetCategories.php', {\n            params: {\n                names: names.join(','),\n                properties: properties ? properties.join(',') : undefined\n            }\n        }).then(function (result) {\n            var videos = result.data.videos;\n            var categories = result.data.categories;\n\n            //categories only come with a list of video ids, so assemble an array of videos based on the video id list and the video map\n            for (var i = 0; i < categories.length; i++) {\n                var category = categories[i];\n                category.videos = [];\n                for (var j = 0; j < category.videoIds.length; j++) {\n                    var videoId = category.videoIds[j];\n                    var video = videos[videoId];\n                    if (video) {\n                        category.videos.push(video);\n                    }\n                }\n                delete category.videoIds;\n            }\n            return categories;\n        }, function (error) {\n            return error;\n        });\n    };\n\n    Video.processVideo = function (videoId) {\n        return $http.get('api/ProcessVideo.php', { params: { videoId: videoId } }).then(function (response) {\n            var result = response.data;\n            if (result.success === true) {\n                return result;\n            } else {\n                return $q.reject(result);\n            }\n        });\n    };\n\n    Video.addToList = function (listName, videoIds) {\n        return $http.get('api/AddToList.php', { params: { videoIds: videoIds, listName: listName } });\n    };\n\n    Video.removeFromList = function (listName, videoIds) {\n        return $http.get('api/RemoveFromList.php', { params: { videoIds: videoIds, listName: listName } });\n    };\n\n    Video.isInList = function (listName, videoId) {\n        return $http.get('api/IsInList.php', { params: { videoId: videoId, listName: listName } }).then(function (response) {\n            return response.data;\n        });\n    };\n\n    Video.getListInfo = function (videoId) {\n        return $http.get('api/GetVideoListInfo.php', { params: { videoId: videoId } }).then(function (response) {\n            return response.data;\n        });\n    };\n    return Video;\n}]);","angular.module('app').service('VideoSource', ['$http', '$q', function($http, $q) {\n        function VideoSource() {\n\n        }\n\n        VideoSource.getAll = function() {\n            var deferred = $q.defer();\n            $http.get('api/GetVideoSources.php').success(function(data) {\n                deferred.resolve(data);\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        VideoSource.getById = function(id) {\n            var deferred = $q.defer();\n            $http.get('api/GetVideoSourceById.php?id=' + id).success(function(data) {\n                deferred.resolve(data);\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        VideoSource.save = function(videoSource) {\n            return $q(function(resolve, reject) {\n                $http.post('api/PostVideoSource.php', videoSource).then(function(result) {\n                    resolve(result.data);\n                }, reject);\n            });\n        };\n\n        VideoSource.deleteById = function(id) {\n            return $q(function(resolve, reject) {\n                $http.delete('api/DeleteVideoSource.php', {data: {id: id}}).then(function(result) {\n                    resolve(result.data);\n                }, reject);\n            });\n        };\n\n        return VideoSource;\n    }]);","angular.module('app').directive('pathExistsValidator', ['$http', '$q', function($http, $q) {\n    return { \n        require: 'ngModel',\n        link: function(scope, element, attrs, ngModel) {\n            ngModel.$asyncValidators.pathExists = function(modelValue, viewValue) {\n                var value = modelValue || viewValue;\n                return $http.get('api/GetPathExistsOnServer.php', {params: {path: value}}).then(\n                        function(response) {\n                            if (!response.data.exists === true) {\n                                return $q.reject(response.data.errorMessage);\n                            }\n                            return true;\n                        }\n                );\n            };\n        }\n    };\n}]);","angular.module('app').directive('urlExistsValidator', ['$http', '$q', function ($http, $q) {\n    return {\n        require: 'ngModel',\n        link: function (scope, element, attrs, ngModel) {\n            ngModel.$asyncValidators.urlExists = function (modelValue, viewValue) {\n                var value = modelValue || viewValue;\n                return $http.get('api/GetUrlExists.php', { params: { url: value } }).then(function (response) {\n                    if (!response.data.exists === true) {\n                        return $q.reject(response.data.errorMessage);\n                    }\n                    return true;\n                }, function (err) {\n                    return $q.reject(err);\n                });\n            };\n        }\n    };\n}]);","angular.module('app').directive('categoryScroller', ['$window', '$timeout', 'debounce', function ($window, $timeout, debounce) {\n        var id = 0;\n        return {\n            restrict: 'E',\n            controller: ['$scope', 'Video', Controller],\n            controllerAs: 'vm',\n            bindToController: true,\n            templateUrl: '/categoryScroller.html',\n            scope: {\n                category: '=?',\n                categoryName: '=?'\n            },\n            link: function ($scope, element, attributes, vm) {\n                var myId = id++;\n                //anytime the window changes size, determine the new width of this element\n                angular.element($window).bind('resize', function () {\n                    calculateElementWidth();\n                });\n\n                function calculateElementWidth() {\n                    debounce(myId, function () {\n                        if(element) {\n                            var rect = element[0].getBoundingClientRect();\n                            vm.width = rect.width;\n                        }\n                    }, 100);\n                }\n\n                //anytime the width changes, calculate the size of the first video tile in the list\n                $scope.$watchCollection(function () {\n                    return vm.width;\n                }, function (width) {\n                    getTileWidth();\n                });\n\n                function getTileWidth() {\n                    //get the first video tile\n                    var videoTile = element[0].querySelector('video-tile');\n                    if(videoTile) {\n                        var rect = videoTile.getBoundingClientRect();\n                        vm.videoTileWidth = rect.width;\n                        vm.videoTileHeight = rect.height;\n                    }\n                }\n                //the first time the length of the video list is greater than zero, recalculate the tile width\n                $scope.$watch(function () {\n                    return vm.category && vm.category.videos && vm.category.videos.length ? true : false;\n                }, function (newValue, oldValue) {\n                    if (newValue) {\n                        getTileWidth();\n                    }\n                });\n\n                calculateElementWidth();\n\n            }\n        };\n\n        function Controller($scope, Video) {\n            var vm = angular.extend(this, {\n                category: this.category,\n                direction: undefined,\n                width: 0,\n                videoTileWidth: 0,\n                videoTileHeight: 0,\n                visibleVideoTileCount: 0,\n                visibleVideos: [],\n                leftmostVideoIndex: 0,\n                //api\n                calculateVisibleVideoTileCount: calculateVisibleVideoTileCount,\n                getLocationText: getLocationText,\n                populateVisibleVideos: populateVisibleVideos,\n                pageLeft: pageLeft,\n                pageRight: pageRight,\n                showPageLeft: showPageLeft,\n                showPageRight: showPageRight,\n                videoCount: videoCount\n            });\n\n            //anytime the categoryName changes, reload the video list\n            $scope.$watch(function () {\n                return vm.categoryName;\n            }, function (newValue, oldValue) {\n                if (newValue) {\n                    Video.getCategories([newValue]).then(function (categories) {\n                        vm.category = categories[0];\n                        populateVisibleVideos();\n                    });\n                }\n            });\n\n            $scope.$watch(function () {\n                return vm.videoTileWidth;\n            }, function () {\n                vm.calculateVisibleVideoTileCount();\n            });\n            $scope.$watch(function () {\n                return vm.width;\n            }, function () {\n                vm.calculateVisibleVideoTileCount();\n            });\n\n            $scope.$watch(function () {\n                return vm.visibleVideoTileCount;\n            }, function (newVisibleVideoTileCount, oldVisibleVideoTileCount) {\n                populateVisibleVideos();\n            });\n\n            function populateVisibleVideos() {\n                if (vm.visibleVideoTileCount < 1) {\n                    vm.visibleVideos = [];\n                    return;\n                }\n                if (!vm.category) {\n                    return;\n                }\n                //if the list of videos is smaller than the maximum displayable, then just add all of them\n                if (vm.videoCount() <= vm.visibleVideoTileCount) {\n                    vm.visibleVideos = vm.category.videos.slice(0);\n                } else {\n                    //find the index of the leftmost video\n                    var endIndex = vm.leftmostVideoIndex + vm.visibleVideoTileCount;\n                    vm.visibleVideos = [];\n                    for (var i = vm.leftmostVideoIndex; i < endIndex; i++) {\n                        var index = i % vm.videoCount();\n                        var video = vm.category.videos[index];\n                        if (video) {\n                            vm.visibleVideos.push(video);\n                        }\n                    }\n                }\n            }\n\n            function calculateVisibleVideoTileCount() {\n                //60px for the left and right navigation buttons\n                var num = (vm.width - 60) / vm.videoTileWidth;\n                if (!isFinite(num)) {\n                    num = 0;\n                } else {\n                    num = Math.floor(num);\n                }\n                vm.visibleVideoTileCount = num;\n            }\n\n            function pageLeft() {\n                var newLeftmostIndex = vm.leftmostVideoIndex - vm.visibleVideoTileCount;\n                if (newLeftmostIndex < 0) {\n                    newLeftmostIndex = 0;\n                }\n                vm.leftmostVideoIndex = newLeftmostIndex;\n                vm.populateVisibleVideos();\n                vm.direction = 'left';\n            }\n\n            function pageRight() {\n                var newLeftmostIndex = vm.leftmostVideoIndex + vm.visibleVideoTileCount;\n                var maxLeftmostIndex = (vm.videoCount() + 1) - vm.visibleVideoTileCount;\n                if (newLeftmostIndex > maxLeftmostIndex) {\n                    newLeftmostIndex = maxLeftmostIndex;\n                }\n                vm.leftmostVideoIndex = newLeftmostIndex;\n                console.log('leftmost idx' + vm.leftmostVideoIndex);\n                vm.populateVisibleVideos();\n                vm.direction = 'right';\n            }\n\n            function videoCount() {\n                return vm.category && vm.category.videos ? vm.category.videos.length : 0;\n            }\n\n            function showPageLeft() {\n                return vm.leftmostVideoIndex > 0\n            }\n\n            function showPageRight() {\n                var maxLeftmostIndex = (vm.videoCount() - 1) - vm.visibleVideoTileCount;\n                return vm.leftmostVideoIndex < maxLeftmostIndex;\n            }\n\n            function getLocationText() {\n                return \"\";\n                var firstNumber = vm.leftmostVideoIndex = 0 ? 0 : (vm.leftmostVideoIndex + 1);\n                var text = firstNumber + '-' + (vm.leftmostVideoIndex + vm.visibleVideos.length) + ' of ' + vm.videoCount();\n                return text;\n            }\n        }\n    }\n]);","angular.module('app').directive('categoryScrollerCollection', [function () {\n        return {\n            restrict: 'E',\n            controller: ['Video', Controller],\n            controllerAs: 'vm',\n            bindToController: true,\n            templateUrl: '/categoryScrollerCollection.html',\n            link: function () {\n\n            }\n        };\n\n        function Controller(Video) {\n            var vm = angular.extend(this, {\n                categories: undefined\n            });\n            //get all of the category names\n            Video.getCategoryNames().then(function (names) {\n                 vm.categoryNames = names;\n            });\n        }\n    }\n]);","angular.module('app').directive('episode', [function () {\n        return {\n            restrict: 'E',\n            scope: {\n                episode: '=',\n                selected: '=?'\n            },\n            controller: Controller,\n            controllerAs: 'vm',\n            bindToController: true,\n            link: function($scope, element, attributes, vm){\n                \n            },\n            templateUrl: '/episode.html'\n        };\n        \n        function Controller(){\n            var vm = angular.extend(this, {\n                //episode\n            }, this);\n            \n            var maxTitleLength = 17;\n            //truncate the title \n            \n            vm.title = vm.episode.title;\n            if(vm.episode.title.length > maxTitleLength){\n                vm.title = vm.episode.title.substring(0, maxTitleLength) + '...';\n            }\n\n            //calculate the runtime text\n            if(typeof vm.episode.runtime === 'number' && vm.episode.runtime > -1){\n                var runtimeMinutes = parseInt(vm.episode.runtime / 60);\n                vm.runtimeText = '(' + runtimeMinutes + ' min)';\n            }   \n        }\n    }\n]);","angular.module('app').directive('navbar', ['$state', function ($state) {\n    return {\n        restrict: 'E',\n        controller: ['$state', Controller],\n        controllerAs: 'vm',\n        bindToController: true,\n        templateUrl: '/navbar.html',\n        scope: {\n        }\n    };\n\n    function Controller($state) {\n        var vm = angular.extend(this, {\n            searchTerm: undefined,\n            navbarIsOpen: false,\n            //api\n            search: search,\n            hideNavbar: hideNavbar,\n            toggleNavbar: toggleNavbar\n        });\n        function search() {\n            if (vm.searchTerm && vm.searchTerm.trim().length > 0) {\n                $state.go('search', { q: vm.searchTerm });\n                vm.searchTerm = undefined;\n                hideNavbar();\n            }\n        }\n\n        function showNavbar() {\n            vm.navbarIsOpen = true;\n        }\n\n        function hideNavbar() {\n            vm.navbarIsOpen = false;\n        }\n\n        function toggleNavbar() {\n            vm.navbarIsOpen ? hideNavbar() : showNavbar();\n        }\n    }\n}]);","angular.module('app').directive('videoPlayer', [function () {\n    return {\n        restrict: 'E',\n        replace: true,\n        controllerAs: 'vm',\n        controller: ['$scope', 'uniqueId', 'Video', 'globals', Controller],\n        bindToController: true,\n        scope: {\n            videoId: '='\n        },\n        link: function (scope, element, attributes, vm) {\n            vm.element = element;\n        }\n    };\n    function Controller($scope, uniqueId, Video, globals) {\n        var vm = this;\n\n        Video.getById(vm.videoId).then(function (video) {\n            //get the current progress of this video.\n            Video.getProgress(vm.videoId).then(function (seconds) {\n                vm.video = video;\n                addVideoElement(video, seconds);\n            });\n        });\n\n        function addVideoElement(video, startSeconds) {\n            var id = uniqueId();\n            var html = '\\\n                <video id=\"' + id + '\" class=\"video-js\" vjs-big-play-centered controls style=\"width:100%;height:100%;\"\\\n                    poster=\"' + video.hdPosterUrl + '\" data-setup=\\'{\"preload\": \"auto\"}\\'>\\\n                    <source src=\"' + video.url + '\" type=\"video/mp4\" \\>\\\n                    <p class=\"vjs-no-js\">\\\n                        To view this video please enable JavaScript, and consider upgrading to a web browser that\\\n                        <a href=\"http://videojs.com/html5-video-support/\" target=\"_blank\">supports HTML5 video</a>\\\n                    </p>\\\n                 </video>';\n            vm.element.append(html);\n            //initialize the video player\n            var player = videojs(id);\n\n            //register events\n            player.ready(function () {\n                this.currentTime(startSeconds);\n                this.on('timeupdate', function () {\n                    updateTime(this.currentTime());\n                })\n                //when the video finishes, mark it as complete\n                this.on('ended', function () {\n                    Video.setProgress(vm.video.videoId, -1, true);\n                })\n            });\n        }\n\n        var lastUpdateTime = new Date();\n        function updateTime(currentSeconds) {\n            var now = new Date();\n            //if it has been at least n seconds since the last time save, save now\n            if (now.getTime() - lastUpdateTime.getTime() > 2000) {\n                lastUpdateTime = now;\n                Video.setProgress(vm.video.videoId, currentSeconds);\n            }\n        }\n\n        $scope.$on(\"$destroy\", function () {\n            globals.hideNavbar = false;\n        });\n    }\n\n}]);","angular.module('app').directive('videoTile', [function () {\n        return {\n            restrict: 'E',\n            controllerAs: 'vm',\n            controller: [Controller],\n            bindToController: true,\n            scope: {\n                video: '='\n            },\n            templateUrl: '/videoTile.html'\n        }\n\n        function Controller() {\n            var vm = this;\n            //if the video has no poster, use the blank one\n            if (vm.video && !vm.video.hdPosterUrl) {\n                if (vm.video.mediaType === 'Movie') {\n                    vm.video.hdPosterUrl = 'assets/img/posters/BlankPoster.hd.jpg'\n                }\n            }\n        }\n    }]);","angular.module('app').controller('AddNewMediaItemController', ['Video', 'globals', 'VideoSource', 'notify', function (Video, globals, VideoSource, notify) {\n        globals.title = 'Add new media item';\n\n        var vm = angular.extend(this, {\n            //properties\n            videoSources: [],\n            newMediaItem: {},\n            loadMessage: undefined,\n            //api\n            addNewMediaItem: addNewMediaItem\n        });\n\n        VideoSource.getAll().then(function (videoSources) {\n            vm.videoSources = videoSources;\n        });\n\n        function addNewMediaItem() {\n            vm.loadMessage = 'Scanning for new media';\n            Video.addNewMediaItem(vm.newMediaItem.videoSourceId, vm.newMediaItem.path).then(function (result) {\n                if (!result || result.success !== true) {\n                    throw new Error('An error occurred' + JSON.stringify(result));\n                }\n                if (result && result.newVideoIds && result.newVideoIds.length > 0) {\n                    notify(result.newVideoIds.length + ' new media ' + (result.newVideoIds.length === 1 ? 'item was' : 'items were') + ' successfully added', 'success');\n                } else {\n                    notify('No new media items were found');\n                }\n            }, function (error) {\n                notify(error.message, 'danger');\n            }).finally(function () {\n                vm.loadMessage = undefined;\n            });\n        }\n    }]);","angular.module('app').controller('AdminController', ['$timeout', '$window', 'globals', 'api', 'notify', 'Video', 'admin',\n    function ($timeout, $window, globals, api, notify, Video, admin) {\n        globals.title = 'Admin';\n\n        var vm = angular.extend(this, {\n            //properties\n            serverVersionNumber: undefined,\n            //api\n            fetchMissingMetadata: fetchMissingMetadata,\n            generateLibrary: generateLibrary,\n            updateApplication: updateApplication\n        });\n\n\n        getVideoCounts();\n        getServerVersionNumber();\n\n        function generateLibrary() {\n            var n = notify('Generating library', 'info');\n            globals.generateLibraryIsPending = true;\n            api.generateLibrary().then(function (result) {\n                if (result.errors.length > 0) {\n                    notify('Library was generated, but there were errors: <ul><li>' + result.errors.join('</li><li>')  + '</li></ul>', 'danger');\n                } else {\n                    notify('Library has been generated', 'success');\n                }\n            }).catch(function (err) {\n                notify('There was an error generating the library: \"' + err.message + '\"', 'danger');\n            }).finally(function () {\n                globals.generateLibraryIsPending = false;\n                getVideoCounts();\n            });\n        }\n\n        function getServerVersionNumber() {\n            admin.getServerVersionNumber().then(function (version) {\n                vm.serverVersionNumber = version;\n            });\n        }\n        function getVideoCounts() {\n            Video.getCounts().then(function (videoCounts) {\n                vm.videoCounts = videoCounts;\n            });\n        }\n\n        function fetchMissingMetadata() {\n            globals.fetchMissingMetadataIsPending = true;\n            notify('Fetching missing metadata', 'info');\n            Video.fetchMissingMetadata().then(function () {\n                notify('Finished fetching missing metata for videos', 'success');\n            }, function () {\n                notify('There was an error fetching missing metadata', 'error');\n            }).finally(function () {\n                globals.fetchMissingMetadataIsPending = false;\n            });\n        }\n\n        function updateApplication() {\n            globals.checkForUpdatesIsPending = true;\n            notify('Checking for updates. Please wait until this operation has completed', 'info');\n            admin.updateApplication().then(function (result) {\n                if (result.updateWasApplied) {\n                    notify('Application has been updated. Reloading page.', 'success');\n                    $timeout(function () {\n                        $window.location.reload();\n                    }, 4000);\n                } else {\n                    notify('No updates were found', 'success');\n                }\n            }, function () {\n                notify('Unable to check and install updates', 'error');\n            }).finally(function () {\n                globals.checkForUpdatesIsPending = false;\n            });\n        }\n    }]);","angular.module('app').controller('CategoriesController', ['Video', 'globals', '$stateParams',\n    function (Video, globals, $stateParams) {\n        globals.title = 'Add new media item';\n\n        var vm = angular.extend(this, {\n            //properties\n            categoryName: $stateParams.categoryName,\n            loadMessage: undefined,\n            category: undefined,\n        });\n\n        (function constructor() {\n            vm.loadMessage = 'Loading videos';\n            Video.getCategories([vm.categoryName]).then(function (categories) {\n                vm.category = categories[0];\n            }).finally(function () {\n                vm.loadMessage = undefined;\n            });\n        })();\n    }\n]);","angular.module('app').controller('EditVideoSourceController', [\n    '$scope', 'globals', 'VideoSource', '$state', '$stateParams', 'enums',\n    function ($scope, globals, VideoSource, $state, $stateParams, enums) {\n        var vm = angular.extend(this, {\n            isLoading: false,\n            isSaving: false,\n            //properties\n            originalVideoSource: undefined,\n            videoSource: {\n                securityType: enums.securityType.public,\n            },\n            //api\n            reset: reset,\n            save: save,\n            sayHi: function () {\n                alert('hi');\n            },\n            isValidatingUrl: () => {\n                return vm.form.baseUrl.$pending && vm.form.baseUrl.$pending.urlExists;\n            }\n        });\n\n        globals.title = 'Edit Video Source';\n        vm.originalVideoSource = angular.copy(vm.videoSource);\n        loadVideoSource();\n\n        function loadVideoSource() {\n            //if an id was provided, go look up the settings for that videoSource\n            if ($stateParams.id && $stateParams.id > 0) {\n                vm.isLoading = true;\n                VideoSource.getById($stateParams.id).then(function (videoSource) {\n                    vm.videoSource = videoSource;\n                    vm.originalVideoSource = angular.copy(videoSource);\n                }).finally(function () {\n                    vm.isLoading = false;\n                });\n            }\n        }\n\n        function reset() {\n            vm.videoSource = vm.originalVideoSource;\n            vm.form.setPristine(true);\n        }\n\n        function save() {\n            vm.isSaving = true;\n            VideoSource.save(vm.videoSource).then(function (videoSource) {\n                vm.isSaving = false;\n                loadVideoSource();\n                notify('Saved video source', 'success');\n                $state.go('videoSources', {}, { reload: true });\n            }, function () {\n                //handle the error\n                vm.isSaving = false;\n            });\n        }\n    }]);","angular.module('app').controller('FetchByTitleController', ['$stateParams',\n    function($stateParams) {\n        var vm = angular.extend(this, {\n            //properties\n            title: undefined\n                    //api\n\n        });\n\n        vm.title = $stateParams.title;\n\n    }]);","angular.module('app').controller('HomeController', ['globals', 'Video', function(globals, Video) {\n        var vm = angular.extend(this, {\n            allVideos: [],\n            currentlyLoadedVideos: [],\n            //api\n            loadMore: loadMore\n        });\n        globals.title = 'Home';\n\n//        Video.getAll().then(function(videos) {\n//            vm.allVideos = videos;\n//        });\n\n        function loadMore() {\n            var numberToLoad = globals.infiniteScrollPageSize;\n            var beginIndex = vm.currentlyLoadedVideos.length;\n            var endIndex = beginIndex + numberToLoad;\n            //if the end index is larger than the list of all videos, change the end index to the length of the list of all videos\n            endIndex = endIndex > vm.allVideos.length ? vm.allVideos.length : endIndex;\n\n            for (var i = beginIndex; i < endIndex; i++) {\n                vm.currentlyLoadedVideos.push(vm.allVideos[i]);\n            }\n        }\n\n    }]);","angular.module('app').controller('MetadataFetcherController', ['$scope', '$q', 'globals', 'refreshImage', 'Video', '$state', '$stateParams', 'notify', 'enums',\n    function ($scope, $q, globals, refreshImage, Video, $state, $stateParams, notify, enums) {\n        globals.title = 'Fetch Metadata';\n        var vm = angular.extend(this, {\n            searchByOptions: {\n                tmdbId: 'tmdbId',\n                title: 'title'\n            },\n            videoId: $stateParams.videoId,\n            searchBy: 'tmdbId',\n            isSearching: false,\n            metadataIsBeingFetched: false,\n            textboxLabel: undefined,\n            //this is the value (title, tmdbId) to use to search for the metadata\n            searchValue: undefined,\n            searchResults: undefined,\n            video: {},\n            //api\n            search: search,\n            calculateTextboxLabel: calculateTextboxLabel,\n            fetchMetadataBytmdbId: fetchMetadataBytmdbId\n        });\n\n        function constructor() {\n            //load the video\n            Video.getById(vm.videoId).then(function (video) {\n                angular.extend(vm.video, video);\n                searchByChanged()\n                //run the first search right away, since that's probably what the user wants to do anyway...\n                search();\n            });\n\n            Video.getPathInfo(vm.videoId).then(function (video) {\n                angular.extend(vm.video, video);\n            });\n\n            $scope.$watch('vm.searchBy', searchByChanged);\n\n            $scope.$watch('vm.video', vm.calculateTextboxLabel);\n        }\n\n        function searchByChanged() {\n            vm.calculateTextboxLabel();\n            if (vm.searchBy === vm.searchByOptions.title) {\n                vm.searchValue = vm.video.title;\n            } else {\n                vm.searchValue = '';\n            }\n        }\n\n        function calculateTextboxLabel() {\n            vm.textboxLabel = undefined;\n\n            if (!vm.video) {\n                return;\n            }\n            if (vm.searchBy === vm.searchByOptions.title) {\n                vm.textboxLabel = 'Title';\n            } else {\n                vm.textboxLabel = vm.video.mediaType === enums.mediaTypeMovie ? 'TMDB ID' : 'TVDB ID';\n            }\n        }\n\n        function search() {\n            vm.isSearching = true;\n            var promise;\n            if (vm.searchBy === vm.searchByOptions.title) {\n                promise = Video.getMetadataSearchResultsByTitle(vm.video.mediaType, vm.searchValue);\n            } else {\n                promise = Video.getMetadataSearchResultsBytmdbId(vm.video.mediaType, vm.searchValue);\n            }\n            promise.then(function (searchResults) {\n                vm.metadataResults = searchResults;\n                vm.isSearching = false;\n            });\n        }\n\n        function fetchMetadataBytmdbId(tmdbId) {\n            vm.metadataIsBeingFetched = true;\n            Video.fetchMetadata(vm.video.videoId, tmdbId).then(function () {\n                return Video.getById(vm.video.videoId);\n            }).then(function (video) {\n                //refresh the posters so that when we go back to videoInfo, the poster cache has been cleared\n                return refreshImage(video.sdPosterUrl).then(function () {\n                    return refreshImage(video.hdPosterUrl);\n                }).then(function () {\n                    //there was an issue getting the browser to refresh the cached images. try reloading the page (after we have \n                    //navigated to the videoInfo page)\n                    setTimeout(function () {\n                        window.location.reload();\n                    }, 200);\n                    return undefined;\n                }, function (err) {\n                    return $q.reject(err);\n                });\n            }).then(function () {\n                vm.metadataResults = undefined;\n                vm.metadataIsBeingFetched = false;\n\n                notify('Updated video with selected metadata', 'success');\n                $state.go('videoInfo', { videoId: vm.videoId });\n            })['catch'](function (err) {\n                vm.metadataIsBeingFetched = false;\n                notify('There was an error fetching metadata for the video you selected: ' + err, 'error');\n            })\n        }\n\n        constructor();\n    }\n]);","angular.module('app').controller('PlayController', ['Video', '$scope', 'globals', '$stateParams', 'notify',\n    function (Video, $scope, globals, $stateParams, notify) {\n        globals.title = 'Play';\n        globals.hideNavbar = true;\n\n        var vm = angular.extend(this, {\n            videoId: $stateParams.videoId,\n            showVideoId: $stateParams.showVideoId\n        });\n\n       \n\n        $scope.$on(\"$destroy\", function () {\n            globals.hideNavbar = false;\n        });\n    }]);","angular.module('app').controller('SearchController', ['globals', 'Video', '$stateParams', function(globals, Video, $stateParams) {\n        var vm = angular.extend(this, {\n            allVideos: null,\n            currentlyLoadedVideos: [],\n            searchTerm: $stateParams.q,\n            //api\n            loadMore: loadMore\n        });\n\n        globals.title = 'Home';\n        var searchTerm = $stateParams.q;\n\n        Video.search(searchTerm).then(function(videos) {\n            vm.allVideos = videos;\n        });\n\n\n        function loadMore() {\n            var numberToLoad = globals.infiniteScrollPageSize;\n            var beginIndex = vm.currentlyLoadedVideos.length;\n            var endIndex = beginIndex + numberToLoad;\n            //if the end index is larger than the list of all videos, change the end index to the length of the list of all videos\n            endIndex = endIndex > vm.allVideos.length ? vm.allVideos.length : endIndex;\n\n            for (var i = beginIndex; i < endIndex; i++) {\n                var video = vm.allVideos[i];\n                vm.currentlyLoadedVideos.push(video);\n            }\n        }\n\n    }]);","angular.module('app').controller('VideoInfoController', ['$scope', '$timeout', 'globals', 'Video', '$state', '$stateParams', 'enums', 'notify',\n    function ($scope, $timeout, globals, Video, $state, $stateParams, enums, notify) {\n        var vm = angular.extend(this, {\n            listInfo: undefined,\n            progressPercent: 0,\n            preventCache: $stateParams.preventCache,\n            episodes: undefined,\n            nextEpisode: undefined,\n            videoId: $stateParams.videoId,\n            loadMessage: undefined,\n            isProcessingVideo: false,\n            isInMyList: undefined,\n            //api\n            getProgressPercentType: getProgressPercentType,\n            runtimeMinutes: runtimeMinutes,\n            navigateToShow: navigateToShow,\n            scanForNewMedia: scanForNewMedia,\n            playIsDisabled: playIsDisabled,\n            processVideo: processVideo,\n            toggleList: toggleList\n        });\n        globals.title = 'VideoInfo';\n\n        $scope.$watch('vm.episodes', fetchAllEpisodePercentWatched);\n\n        loadListInfo();\n\n        //load the video by id\n        Video.getById(vm.videoId).then(function (video) {\n            vm.video = video;\n\n            if (vm.video.mediaType === enums.mediaType.show) {\n                //get all of the episodes for this show\n                Video.getEpisodes(vm.video.videoId).then(function (episodes) {\n                    vm.episodes = episodes;\n                    //find the next episode that should be watched\n                }).then(function () {\n                    return Video.getNextEpisode(vm.video.videoId);\n                    //select the episode in our local list of episodes that matches the next episode\n                }).then(function (nextEpisode) {\n                    vm.nextEpisode = _.where(vm.episodes, { videoId: nextEpisode.videoId })[0];\n                    //figure out how much of this episode has been watched\n                }).then(function () {\n                    return Video.getProgressPercent(vm.nextEpisode.videoId);\n                    //save the percentWatched to the episode\n                }).then(function (percent) {\n                    vm.nextEpisode.percentWatched = percent;\n                });\n            }\n\n            //load the progress of this video\n            Video.getProgressPercent(vm.video.videoId).then(function (percent) {\n                vm.progressPercent = percent;\n            });\n        });\n\n        function processVideo() {\n            vm.isProcessingVideo = true;\n            Video.processVideo(vm.videoId).then(function () {\n                notify('Video was processed', 'success');\n            }, function () {\n                notify('There was a problem processing the video', 'error');\n            }).finally(function () {\n                vm.isProcessingVideo = false;\n            });\n        }\n\n        function runtimeMinutes() {\n            if (vm.video && vm.video.runtime) {\n                return Math.ceil(vm.video.runtime / 60);\n            } else {\n                return null;\n            }\n        }\n\n        function playIsDisabled() {\n            if (!vm.video || (vm.video.mediaType === enums.mediaType.show && !vm.nextEpisode)) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        /**\n         * Grabs the percent watched for every episode\n         * @returns {undefined}\n         */\n        function fetchAllEpisodePercentWatched() {\n            var videoIds = _.pluck(vm.episodes, 'videoId');\n            Video.getProgressPercentMultiple(videoIds).then(function (percentObjects) {\n                for (var i in percentObjects) {\n                    var percentObj = percentObjects[i];\n                    var episode = _.where(vm.episodes, { videoId: percentObj.videoId })[0];\n                    if (episode) {\n                        episode.percentWatched = percentObj.percent;\n                    }\n                }\n            });\n        }\n\n        function getProgressPercentType() {\n            if (vm.progressPercent < 40) {\n                return 'danger';\n            } else if (vm.progressPercent < 99) {\n                return 'warning';\n            } else if (vm.progressPercent < 101) {\n                return 'success';\n            }\n        }\n\n        function scanForNewMedia() {\n            vm.loadMessage = 'Scanning for new media';\n            Video.scanForNewMedia(vm.videoId).then(function (result) {\n                if (!result || result.success !== true) {\n                    throw new Error('An error occurred' + JSON.stringify(result));\n                }\n                if (result && result.newVideoIds && result.newVideoIds.length > 0) {\n                    notify(result.newVideoIds.length + ' new media ' + (result.newVideoIds.length === 1 ? 'item was' : 'items were') + ' successfully added', 'success');\n                    vm.loadMessage = 'Refreshing page';\n                    return $timeout(function () {\n                        //reload the current state to get any new videos\n                        $state.reload($state.current.name);\n                        vm.loadMessage = undefined;\n                    }, 1500);\n                } else {\n                    notify('No new media items were found');\n                }\n\n            }, function (error) {\n                notify(error.message, 'danger');\n            }).finally(function () {\n                vm.loadMessage = undefined;\n            });\n        }\n\n        function navigateToShow() {\n            Video.getShowFromEpisodeId(vm.videoId).then(function (show) {\n                $state.go('videoInfo', { videoId: show.videoId });\n            });\n        }\n\n        function loadListInfo() {\n            return Video.getListInfo(vm.videoId).then((value) => {\n                vm.listInfo = value;\n            });\n        }\n\n        function toggleList(listName) {\n            var promise;\n            if (this.listInfo[listName]) {\n                promise = Video.removeFromList(listName, vm.videoId);\n            } else {\n                promise = Video.addToList(listName, vm.videoId);\n            }\n            //switch the value locally for now so the user sees an instant change\n            this.listInfo[listName] = !this.listInfo[listName];\n            return promise.then(function () {\n                return loadListInfo();\n            }, console.error);\n        }\n    }\n]);","angular.module('app').controller('VideoSourcesController', ['globals', 'VideoSource', 'notify',\n    function(globals, VideoSource, notify) {\n        var vm = this;\n        vm.editIsVisible = false;\n        vm.deleteVideoSource = deleteVideoSource;\n        vm.refresh = loadVideoSources;\n\n        globals.title = 'Video Sources';\n        loadVideoSources();\n        \n        function loadVideoSources() {\n            VideoSource.getAll().then(function(videoSources) {\n                vm.videoSources = videoSources;\n            });\n        }\n\n        function deleteVideoSource(id) {\n            VideoSource.deleteById(id).then(loadVideoSources);\n        }\n    }]);"]}