{"version":3,"sources":["app.js","services/notifyService.js","routes.js","controllers/AddNewMediaItemController.js","controllers/AdminController.js","controllers/BaseController.js","controllers/EditVideoSourceController.js","controllers/FetchByTitleController.js","controllers/HomeController.js","controllers/MetadataFetcherController.js","controllers/NavbarController.js","controllers/PlayController.js","controllers/SearchController.js","controllers/VideoInfoController.js","controllers/VideoSourcesController.js","directives/confirmDirective.js","directives/episodeDirective.js","directives/focusDirective.js","directives/jwplayerDirective.js","directives/videoTileDirective.js","services/adminService.js","services/apiService.js","services/globalsService.js","services/libs.js","services/refreshImageService.js","services/uniqueIdService.js","services/util.js","services/VideoService.js","services/VideoSourceService.js","validators/pathExistsValidator.js","validators/urlExistsValidator.js"],"names":["fetchConstants","injector","angular","$http","get","$q","promises","resolve","reject","then","result","module","constant","data","all","bootstrapApplication","element","document","ready","bootstrap","notify","message","type","PNotify","title","text","styling","run","$rootScope","enums","globals","config","$stateProvider","$urlRouterProvider","otherwise","state","url","templateUrl","controller","controllerAs","parent","$state","$stateParams","Video","VideoSource","addNewMediaItem","vm","newMediaItem","videoSourceId","path","error","extend","this","videoSources","getAll","$timeout","$window","api","admin","generateLibrary","generateLibraryIsPending","err","getVideoCounts","getServerVersionNumber","version","serverVersionNumber","getCounts","videoCounts","fetchMissingMetadata","fetchMissingMetadataIsPending","updateApplication","checkForUpdatesIsPending","updateWasApplied","location","reload","undefined","$scope","loadVideoSource","id","isLoading","getById","videoSource","originalVideoSource","copy","reset","form","setPristine","save","isSaving","go","securityType","sayHi","alert","loadMore","numberToLoad","infiniteScrollPageSize","beginIndex","currentlyLoadedVideos","length","endIndex","allVideos","i","push","videos","refreshImage","searchByChanged","calculateTextboxLabel","searchBy","searchByOptions","searchValue","video","textboxLabel","mediaType","mediaTypeMovie","search","isSearching","promise","getMetadataSearchResultsByTitle","getMetadataSearchResultsByOnlineVideoId","searchResults","metadataResults","fetchMetadataByOnlineVideoId","onlineVideoId","metadataIsBeingFetched","fetchMetadata","videoId","sdPosterUrl","hdPosterUrl","setTimeout","window","$watch","getPathInfo","searchTerm","trim","q","hideNavbar","showNavbar","navbarIsOpen","toggleNavbar","showVideoId","$on","fetchAllEpisodePercentWatched","videoIds","_","pluck","episodes","getProgressPercentMultiple","percentObjects","percentObj","episode","where","percentWatched","percent","getProgressPercentType","progressPercent","navigateToShow","getShowFromEpisodeId","show","preventCache","getEpisodes","getNextEpisode","nextEpisode","getProgressPercent","loadVideoSources","deleteVideoSource","deleteById","editIsVisible","refresh","directive","restrict","link","scope","attributes","on","$eval","confirmMessage","confirmed","confirm","Controller","maxTitleLength","substring","runtime","runtimeMinutes","parseInt","runtimeText","bindToController","$parse","focus","getter","assign","uniqueId","util","togglePlayback","player","play","pause","loadVideo","blankItemInPlace","playlist","file","image","posterUrl","jwplayer","load","elementId","setup","flashplayer","primary","startparam","wmode","width","height","events","onTime","onPlay","onComplete","autostart","obj","startVideoWhereWeLeftOffProcessed","position","startVideoWhereWeLeftOff","positionInSeconds","nowTime","Date","timeSinceLastUpdate","playPositionUpdateTime","setProgress","console","debug","startSeconds","seek","getProgress","seconds","remove","replace","attr","template","service","deferred","defer","success","pageTitle","uri","contentWindow","removeEventListener","parentElement","removeChild","iframe","createElement","style","display","addEventListener","src","body","appendChild","counter","item","isArray","pop","params","isNumber","showId","join","isFinished","finished","episodeId","newMediaItemPath","post","require","attrs","ngModel","$asyncValidators","pathExists","modelValue","viewValue","value","response","exists","errorMessage","urlExists"],"mappings":"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","file":"app.min.js","sourcesContent":["angular.module('app', ['ui.router', 'ui.bootstrap', 'infinite-scroll'])\n        .run(['$rootScope', 'enums', 'globals', function($rootScope, enums, globals) {\n                $rootScope.enums = enums;\n                $rootScope.globals = globals;\n            }]);\n\nfetchConstants().then(bootstrapApplication);\n\n\n/**\n * Load constants asynchronously BEFORE bootstrapping the application\n * @returns {unresolved}\n */\nfunction fetchConstants() {\n    var injector = angular.injector([\"ng\"])\n    var $http = injector.get(\"$http\");\n    var $q = injector.get('$q');\n\n    var promises = [\n        $q(function(resolve, reject) {\n            $http.get('api/GetEnumerations.php').then(function(result) {\n                angular.module('app').constant(\"enums\", result.data);\n                resolve();\n            }, reject);\n        })\n    ];\n\n    return $q.all(promises);\n}\n\nfunction bootstrapApplication() {\n    angular.element(document).ready(function() {\n        angular.bootstrap(document, [\"app\"]);\n    });\n}","angular.module('app').service('notify', function() {\n    return notify;\n});\n\n function notify(message, type) {\n        type = type ? type : 'warning';\n        //if danger was provided, convert to error\n        type = type === 'danger' ? 'error' : type;\n        \n        return new PNotify({\n            title: '',\n            text: message,\n            styling: 'bootstrap3',\n            type: type\n        });\n    }","angular.module('app')\n        .config(['$stateProvider', '$urlRouterProvider',\n            function($stateProvider, $urlRouterProvider) {\n                $urlRouterProvider.otherwise('/home');\n\n                $stateProvider\n                   .state('addNewMediaItem', {\n                            url: '/addNewMediaItem',\n                            templateUrl: 'addNewMediaItem.html',\n                            controller: 'AddNewMediaItemController',\n                            controllerAs: 'vm'\n                        }) \n                        .state('home', {\n                            url: '/home',\n                            templateUrl: 'home.html',\n                            controller: 'HomeController',\n                            controllerAs: 'vm'\n                        })\n                        .state('admin', {\n                            url: '/admin',\n                            templateUrl: 'admin.html',\n                            controller: 'AdminController',\n                            controllerAs: 'vm'\n                        })\n                        .state('videoInfo', {\n                            url: '/videoInfo/{videoId:int}',\n                            templateUrl: 'videoInfo.html',\n                            controller: 'VideoInfoController',\n                            controllerAs: 'vm'\n                        })\n                        .state('videoSources', {\n                            url: '/videoSources',\n                            templateUrl: 'videoSources.html',\n                            controller: 'VideoSourcesController',\n                            controllerAs: 'vm'\n                        })\n                        .state('editVideoSource', {\n                            url: '/editVideoSource/{id:int}',\n                            parent: 'videoSources',\n                            templateUrl: 'editVideoSource.html',\n                            controller: 'EditVideoSourceController',\n                            controllerAs: 'vm'\n                        })\n                        .state('play', {\n                            url: '/play/{videoId:int}?{showVideoId:int}',\n                            templateUrl: 'play.html',\n                            controller: 'PlayController',\n                            controllerAs: 'vm'\n                        })\n                        .state('search', {\n                            url: '/search?q',\n                            templateUrl: 'search.html',\n                            controller: 'SearchController',\n                            controllerAs: 'vm'\n                        })\n                        .state('metadataFetcher', {\n                            url: '/metadataFetcher/{videoId:int}',\n                            templateUrl: 'metadataFetcher.html',\n                            controller: 'MetadataFetcherController',\n                            controllerAs: 'vm'\n                        }) \n            }])\n\n        .run(['$rootScope', '$state', '$stateParams', function($rootScope, $state, $stateParams) {\n                $rootScope.$state = $state;\n                $rootScope.$stateParams = $stateParams;\n            }])","angular.module('app').controller('AddNewMediaItemController', ['Video', 'globals', 'VideoSource', 'notify', function (Video, globals, VideoSource, notify) {\n        globals.title = 'Add new media item';\n\n        var vm = angular.extend(this, {\n            //properties\n            videoSources: [],\n            newMediaItem: {},\n            //api\n            addNewMediaItem: addNewMediaItem\n        });\n\n        VideoSource.getAll().then(function (videoSources) {\n            vm.videoSources = videoSources;\n        });\n\n        function addNewMediaItem() {\n            Video.addNewMediaItem(vm.newMediaItem.videoSourceId, vm.newMediaItem.path).then(function (result) {\n                notify('New media items were successfully added', 'success');\n            }, function (error) {\n                notify(error.message, 'danger');\n            });\n        }\n    }]);","angular.module('app').controller('AdminController', ['$timeout', '$window', 'globals', 'api', 'notify', 'Video', 'admin',\n    function($timeout, $window, globals, api, notify, Video, admin) {\n        globals.title = 'Admin';\n\n        var vm = angular.extend(this, {\n            //properties\n            serverVersionNumber: undefined,\n            //api\n            fetchMissingMetadata: fetchMissingMetadata,\n            generateLibrary: generateLibrary,\n            updateApplication: updateApplication\n        });\n\n\n        getVideoCounts();\n        getServerVersionNumber();\n\n        function generateLibrary() {\n            var n = notify('Generating library', 'info');\n            globals.generateLibraryIsPending = true;\n            api.generateLibrary().then(function() {\n                notify('Library has been generated', 'success');\n            }).catch(function(err) {\n                notify('There was an error generating the library: \"' + err.message + '\"', 'danger');\n            }).finally(function() {\n                globals.generateLibraryIsPending = false;\n                getVideoCounts();\n            });\n        }\n\n        function getServerVersionNumber() {\n            admin.getServerVersionNumber().then(function(version) {\n                vm.serverVersionNumber = version;\n            });\n        }\n        function getVideoCounts() {\n            Video.getCounts().then(function(videoCounts) {\n                vm.videoCounts = videoCounts;\n            });\n        }\n\n        function fetchMissingMetadata() {\n            globals.fetchMissingMetadataIsPending = true;\n            notify('Fetching missing metadata', 'info');\n            Video.fetchMissingMetadata().then(function() {\n                notify('Finished fetching missing metata for videos', 'success');\n            }, function() {\n                notify('There was an error fetching missing metadata', 'error');\n            }).finally(function() {\n                globals.fetchMissingMetadataIsPending = false;\n            });\n        }\n\n        function updateApplication() {\n            globals.checkForUpdatesIsPending = true;\n            notify('Checking for updates. Please wait until this operation has completed', 'info');\n            admin.updateApplication().then(function(result) {\n                if (result.updateWasApplied) {\n                    notify('Application has been updated. Reloading page.', 'success');\n                    $timeout(function() {\n                        $window.location.reload();\n                    }, 4000);\n                } else {\n                    notify('No updates were found', 'success');\n                }\n            }, function() {\n                notify('Unable to check and install updates', 'error');\n            }).finally(function() {\n                globals.checkForUpdatesIsPending = false;\n            });\n        }\n    }]);","angular.module('app').controller('BaseController', ['globals',function(globals) {\n        var vm = angular.extend(this, {\n            globals: globals\n        });\n        \n    }]);","angular.module('app').controller('EditVideoSourceController', [\n    '$scope', 'globals', 'VideoSource', '$state', '$stateParams', 'enums',\n    function($scope, globals, VideoSource, $state, $stateParams, enums) {\n        var vm = angular.extend(this, {\n            isLoading: false,\n            isSaving: false,\n            //properties\n            originalVideoSource: undefined,\n            videoSource: {\n                securityType: enums.securityType.public,\n            },\n            //api\n            reset: reset,\n            save: save,\n            sayHi: function() {\n                alert('hi');\n            }\n        });\n\n        globals.title = 'Edit Video Source';\n        vm.originalVideoSource = angular.copy(vm.videoSource);\n        loadVideoSource();\n\n        function loadVideoSource() {\n            //if an id was provided, go look up the settings for that videoSource\n            if ($stateParams.id && $stateParams.id > 0) {\n                vm.isLoading = true;\n                VideoSource.getById($stateParams.id).then(function(videoSource) {\n                    vm.videoSource = videoSource;\n                    vm.originalVideoSource = angular.copy(videoSource);\n                }).finally(function() {\n                    vm.isLoading = false;\n                });\n            }\n        }\n\n        function reset() {\n            vm.videoSource = vm.originalVideoSource;\n            vm.form.setPristine(true);\n        }\n\n        function save() {\n            vm.isSaving = true;\n            VideoSource.save(vm.videoSource).then(function(videoSource) {\n                vm.isSaving = false;\n                loadVideoSource();\n                notify('Saved video source', 'success');\n                $state.go('videoSources', {}, {reload: true});\n            }, function() {\n                //handle the error\n                vm.isSaving = false;\n            });\n        }\n    }]);","angular.module('app').controller('FetchByTitleController', ['$stateParams',\n    function($stateParams) {\n        var vm = angular.extend(this, {\n            //properties\n            title: undefined\n                    //api\n\n        });\n\n        vm.title = $stateParams.title;\n\n    }]);","angular.module('app').controller('HomeController', ['globals', 'Video', function(globals, Video) {\n        var vm = angular.extend(this, {\n            allVideos: [],\n            currentlyLoadedVideos: [],\n            //api\n            loadMore: loadMore\n        });\n        globals.title = 'Home';\n\n        Video.getAll().then(function(videos) {\n            vm.allVideos = videos;\n        });\n\n        function loadMore() {\n            var numberToLoad = globals.infiniteScrollPageSize;\n            var beginIndex = vm.currentlyLoadedVideos.length;\n            var endIndex = beginIndex + numberToLoad;\n            //if the end index is larger than the list of all videos, change the end index to the length of the list of all videos\n            endIndex = endIndex > vm.allVideos.length ? vm.allVideos.length : endIndex;\n\n            for (var i = beginIndex; i < endIndex; i++) {\n                vm.currentlyLoadedVideos.push(vm.allVideos[i]);\n            }\n        }\n\n    }]);","angular.module('app').controller('MetadataFetcherController', ['$scope', '$q', 'globals', 'refreshImage', 'Video', '$state', '$stateParams', 'notify', 'enums',\n    function($scope, $q, globals, refreshImage, Video, $state, $stateParams, notify, enums) {\n        globals.title = 'Fetch Metadata';\n        var vm = angular.extend(this, {\n            searchByOptions: {\n                onlineVideoId: 'onlineVideoId',\n                title: 'title'\n            },\n            videoId: $stateParams.videoId,\n            searchBy: 'onlineVideoId',\n            isSearching: false,\n            metadataIsBeingFetched: false,\n            textboxLabel: undefined,\n            //this is the value (title, onlineVideoId) to use to search for the metadata\n            searchValue: undefined,\n            searchResults: undefined,\n            video: {},\n            //api\n            search: search,\n            calculateTextboxLabel: calculateTextboxLabel,\n            fetchMetadataByOnlineVideoId: fetchMetadataByOnlineVideoId\n        });\n\n        $scope.$watch('vm.searchBy', searchByChanged);\n\n        $scope.$watch('vm.video', vm.calculateTextboxLabel);\n\n        function searchByChanged() {\n            vm.calculateTextboxLabel();\n            if (vm.searchBy === vm.searchByOptions.title) {\n                vm.searchValue = vm.video.title;\n            } else {\n                vm.searchValue = '';\n            }\n        }\n\n        function calculateTextboxLabel() {\n            vm.textboxLabel = undefined;\n\n            if (!vm.video) {\n                return;\n            }\n            if (vm.searchBy === vm.searchByOptions.title) {\n                vm.textboxLabel = 'Title';\n            } else {\n                vm.textboxLabel = vm.video.mediaType === enums.mediaTypeMovie ? 'TMDB ID' : 'TVDB ID';\n            }\n        }\n\n        //load the video\n        Video.getById(vm.videoId).then(function(video) {\n            angular.extend(vm.video, video);\n            searchByChanged()\n        });\n\n        Video.getPathInfo(vm.videoId).then(function(video) {\n            angular.extend(vm.video, video);\n        });\n\n        function search() {\n            vm.isSearching = true;\n            var promise;\n            if (vm.searchBy === vm.searchByOptions.title) {\n                promise = Video.getMetadataSearchResultsByTitle(vm.video.mediaType, vm.searchValue);\n            } else {\n                promise = Video.getMetadataSearchResultsByOnlineVideoId(vm.video.mediaType, vm.searchValue);\n            }\n            promise.then(function(searchResults) {\n                vm.metadataResults = searchResults;\n                vm.isSearching = false;\n            });\n        }\n\n        function fetchMetadataByOnlineVideoId(onlineVideoId) {\n            vm.metadataIsBeingFetched = true;\n            Video.fetchMetadata(vm.video.videoId, onlineVideoId).then(function() {\n                return Video.getById(vm.video.videoId);\n            }).then(function(video) {\n                //refresh the posters so that when we go back to videoInfo, the poster cache has been cleared\n                return refreshImage(video.sdPosterUrl).then(function() {\n                    return refreshImage(video.hdPosterUrl);\n                }).then(function(){\n                    //there was an issue getting the browser to refresh the cached images. try reloading the page (after we have \n                    //navigated to the videoInfo page)\n                    setTimeout(function(){\n                        window.location.reload();\n                    }, 200);\n                    return undefined;\n                });\n            }).then(function() {\n                vm.metadataResults = undefined;\n                vm.metadataIsBeingFetched = false;\n\n                notify('Updated video with selected metadata', 'success');\n                $state.go('videoInfo', {videoId: vm.videoId});\n            })['catch'](function(err) {\n                vm.metadataIsBeingFetched = false;\n                notify('There was an error fetching metadata for the video you selected: ' + err, 'error');\n            })\n        }\n\n\n    }]);","angular.module('app').controller('NavbarController', ['$state', function($state) {\n        var vm = angular.extend(this, {\n            searchTerm: undefined,\n            navbarIsOpen: false,\n            //api\n            search: search,\n            hideNavbar: hideNavbar,\n            toggleNavbar: toggleNavbar\n        });\n\n        function search() {\n            if (vm.searchTerm && vm.searchTerm.trim().length > 0) {\n                $state.go('search', {q: vm.searchTerm});\n                vm.searchTerm = undefined;\n                hideNavbar();\n            }\n        }\n\n        function showNavbar() {\n            vm.navbarIsOpen = true;\n        }\n\n        function hideNavbar() {\n            vm.navbarIsOpen = false;\n        }\n\n        function toggleNavbar() {\n            vm.navbarIsOpen ? hideNavbar() : showNavbar();\n        }\n\n    }]);","angular.module('app').controller('PlayController', ['$scope', 'globals', '$stateParams', 'notify',\n    function($scope, globals, $stateParams, notify) {\n        globals.title = 'Play';\n        globals.hideNavbar = true;\n        \n        var vm = angular.extend(this, {\n            videoId: $stateParams.videoId,\n            showVideoId: $stateParams.showVideoId\n        });\n\n        $scope.$on(\"$destroy\", function() {\n           globals.hideNavbar = false;\n        });\n    }]);","angular.module('app').controller('SearchController', ['globals', 'Video', '$stateParams', function(globals, Video, $stateParams) {\n        var vm = angular.extend(this, {\n            allVideos: [],\n            currentlyLoadedVideos: [],\n            searchTerm: $stateParams.q,\n            //api\n            loadMore: loadMore\n        });\n\n        globals.title = 'Home';\n        var searchTerm = $stateParams.q;\n\n        Video.search(searchTerm).then(function(videos) {\n            vm.allVideos = videos;\n        });\n\n\n        function loadMore() {\n            var numberToLoad = globals.infiniteScrollPageSize;\n            var beginIndex = vm.currentlyLoadedVideos.length;\n            var endIndex = beginIndex + numberToLoad;\n            //if the end index is larger than the list of all videos, change the end index to the length of the list of all videos\n            endIndex = endIndex > vm.allVideos.length ? vm.allVideos.length : endIndex;\n\n            for (var i = beginIndex; i < endIndex; i++) {\n                var video = vm.allVideos[i];\n                vm.currentlyLoadedVideos.push(video);\n            }\n        }\n\n    }]);","angular.module('app').controller('VideoInfoController', ['$scope', 'globals', 'Video', '$state', '$stateParams', 'enums',\n    function($scope, globals, Video,$state,  $stateParams, enums) {\n        var vm = angular.extend(this, {\n            progressPercent: 0,\n            preventCache: $stateParams.preventCache,\n            episodes: undefined,\n            videoId: $stateParams.videoId,\n            //api\n            getProgressPercentType: getProgressPercentType,\n            navigateToShow: navigateToShow\n        });\n        globals.title = 'VideoInfo';\n\n        $scope.$watch('vm.episodes', fetchAllEpisodePercentWatched);\n\n        //load the video by id\n        Video.getById(vm.videoId).then(function(video) {\n            vm.video = video;\n\n            if (vm.video.mediaType === enums.mediaType.show) {\n                //get all of the episodes for this show\n                Video.getEpisodes(vm.video.videoId).then(function(episodes) {\n                    vm.episodes = episodes;\n                    //find the next episode that should be watched\n                }).then(function() {\n                    return Video.getNextEpisode(vm.video.videoId);\n                    //select the episode in our local list of episodes that matches the next episode\n                }).then(function(nextEpisode) {\n                    vm.nextEpisode = _.where(vm.episodes, {videoId: nextEpisode.videoId})[0];\n                    //figure out how much of this episode has been watched\n                }).then(function() {\n                    return Video.getProgressPercent(vm.nextEpisode.videoId);\n                    //save the percentWatched to the episode\n                }).then(function(percent) {\n                    vm.nextEpisode.percentWatched = percent;\n                });\n            }\n\n            //load the progress of this video\n            Video.getProgressPercent(vm.video.videoId).then(function(percent) {\n                vm.progressPercent = percent;\n            });\n\n        })\n\n        /**\n         * Grabs the percent watched for every episode\n         * @returns {undefined}\n         */\n        function fetchAllEpisodePercentWatched() {\n            var videoIds = _.pluck(vm.episodes, 'videoId');\n            Video.getProgressPercentMultiple(videoIds).then(function(percentObjects) {\n                for (var i in percentObjects) {\n                    var percentObj = percentObjects[i];\n                    var episode = _.where(vm.episodes, {videoId: percentObj.videoId})[0];\n                    if (episode) {\n                        episode.percentWatched = percentObj.percent;\n                    }\n                }\n            });\n        }\n\n        function getProgressPercentType() {\n            if (vm.progressPercent < 40) {\n                return'danger';\n            } else if (vm.progressPercent < 99) {\n                return 'warning';\n            } else if (vm.progressPercent < 101) {\n                return 'success';\n            }\n        }\n\n        function navigateToShow() {\n            Video.getShowFromEpisodeId(vm.videoId).then(function(show) {\n                $state.go('videoInfo', {videoId: show.videoId});\n            });\n        }\n    }]);","angular.module('app').controller('VideoSourcesController', ['globals', 'VideoSource', 'notify',\n    function(globals, VideoSource, notify) {\n        var vm = this;\n        vm.editIsVisible = false;\n        vm.deleteVideoSource = deleteVideoSource;\n        vm.refresh = loadVideoSources;\n\n        globals.title = 'Video Sources';\n        loadVideoSources();\n        \n        function loadVideoSources() {\n            VideoSource.getAll().then(function(videoSources) {\n                vm.videoSources = videoSources;\n            });\n        }\n\n        function deleteVideoSource(id) {\n            VideoSource.deleteById(id).then(loadVideoSources);\n        }\n    }]);","angular.module('app').directive('confirm', [function() {\n        return {\n            restrict: 'A',\n            link: function(scope, element, attributes, controller) {\n                element.on('click', function() {\n                    var message = scope.$eval(attributes.confirmMessage);\n                    message = message? message: 'Are you sure you want to do that?';\n                    //show the confirm modal\n                    var confirmed = confirm(message);\n                    if (confirmed) {\n                        scope.$eval(attributes.confirm);\n                    }\n                });\n            }\n        }\n\n    }]);","angular.module('app').directive('episode', [function () {\n        return {\n            restrict: 'E',\n            scope: {\n                episode: '='\n            },\n            controller: Controller,\n            controllerAs: 'vm',\n            bindToController: true,\n            link: function($scope, element, attributes, vm){\n                \n            },\n            templateUrl: 'episodeDirective.html'\n        };\n        \n        function Controller(){\n            var vm = angular.extend(this, {\n                //episode\n            }, this);\n            \n            var maxTitleLength = 16;\n            //truncate the title \n            \n            vm.title = vm.episode.title;\n            if(vm.episode.title.length > maxTitleLength){\n                vm.title = vm.episode.title.substring(0, maxTitleLength) + '...';\n            }\n\n            //calculate the runtime text\n            if(typeof vm.episode.runtime === 'number' && vm.episode.runtime > -1){\n                var runtimeMinutes = parseInt(vm.episode.runtime / 60);\n                vm.runtimeText = '(' + runtimeMinutes + ' min)';\n            }   \n        }\n    }\n]);","angular.module('app').directive('focus', ['$timeout', '$parse', function($timeout, $parse) {\n        return {\n            restrict: 'A',\n            link: function($scope, element, attributes, controller) {\n                $scope.$watch(function() {\n                    return $scope.$eval(attributes.focus);\n                }, function(focus) {\n                    if (focus === true) {\n                        $timeout(function() {\n                            element[0].focus();\n                            getter = $parse(attributes.focus);\n                            //override the value with a false now that we have performed the focus\n                            getter.assign($scope, false);\n                        });\n                    }\n                });\n            }\n        }\n\n    }]);","angular.module('app').directive('jwplayer', ['uniqueId', function(uniqueId) {\n        return {\n            restrict: 'E',\n            replace: true,\n            controllerAs: 'vm',\n            controller: ['Video', '$scope', 'util', Controller],\n            bindToController: true,\n            scope: {\n                videoId: '='\n            },\n            link: function(scope, element, attributes, vm) {\n                vm.elementId = element.attr('id');\n                vm.playlist = [{file: 'http://localhost:8080/videos/movies/A%20Good%20Day%20to%20Die%20Hard/A%20Good%20Day%20to%20Die%20Hard.mp4'}];\n                if (!vm.elementId) {\n                    vm.elementId = uniqueId();\n                }\n\n                element.attr('id', vm.elementId);\n\n                //TODO - implement the keyboard shortcuts\n                function keyboardShortcuts(e) {\n                    switch (e.which) {\n                        case 32://spacebar key\n                            //toggle playback\n                            jwplayer().play();\n                            break;\n                        case 70: //f key\n                            //toggle fullscreen\n                            if (player.getFullscreen() === true) {\n                                player.setFullscreen(false);\n                            } else {\n                                player.setFullscreen(true);\n                            }\n                            break;\n                        case 39: //right arrow key\n                            //seek forward n seconds\n                            var position = player.getPosition();\n                            var newPosition = position + seekBurstSeconds;\n                            if (position <= seekPosition) {\n                                newPosition = seekPosition + seekBurstSeconds;\n                            }\n                            seekPosition = newPosition;\n                            player.seek(seekPosition);\n                            break;\n                        case 37: //left arrow key\n                            //seek backwards n seconds\n                            var position = player.getPosition();\n                            var newPosition = position - seekBurstSeconds;\n                            if (position >= seekPosition) {\n                                newPosition = seekPosition - seekBurstSeconds;\n                            }\n                            seekPosition = newPosition;\n                            player.seek(seekPosition);\n                            break;\n                    }\n                }\n            },\n            template: '<div class=\"jwplayer\"></div>'\n        }\n\n        function Controller(Video, $scope, util) {\n            var vm = this;\n            angular.extend(this,\n                    {\n                        play: play,\n                        pause: pause,\n                        playlist: [],\n                        loadVideo: loadVideo,\n                        togglePlayback: togglePlayback\n                    }\n            );\n            var startSeconds = 0;\n            //keeps track of the number of seconds that have passed since the video has saved its position in the database\n            var playPositionUpdateTime = new Date();\n\n            //load the video\n            Video.getById(vm.videoId).then(function(video) {\n                //get the current progress of this video.\n                Video.getProgress(vm.videoId).then(function(seconds) {\n                    vm.video = video;\n                    startSeconds = seconds;\n                });\n            });\n\n            $scope.$watch('vm.video', vm.loadVideo);\n\n            //when the directive is removed, remove the jwplayer from the page\n            $scope.$on('$destroy', function() {\n                jwplayer(vm.elementId).remove();\n            });\n\n            /**\n             * Toggles the play/pause state. if playing, the player pauses. if paused, the player plays.\n             */\n            function togglePlayback() {\n                vm.player.play();\n            }\n\n            /**\n             * Tells the player to play. If already playing, playback continues. \n             * if paused, the player starts playing.\n             */\n            function play() {\n                vm.player.play(true);\n            }\n\n            /**\n             * Pauses the player. If the player is playing, playback is paused. \n             * if the player is paused, the player stays paused.\n             */\n            function pause() {\n                vm.player.pause(false);\n            }\n\n            function loadVideo(video) {\n                //empty the playlist \n                util.blankItemInPlace(vm.playlist);\n                if (!video) {\n                    return;\n                }\n                //add the video to the playlist\n                vm.playlist.push({\n                    file: video.url,\n                    image: video.posterUrl,\n                    title: video.title,\n                    video: video\n                });\n\n                if (vm.jwplayer) {\n                    vm.player.load(vm.playlist);\n                } else {\n                    //the jwplayer has not yet been created, create it now\n                    jwplayer(vm.elementId).setup({\n                        flashplayer: 'lib/jwplayer-6.11/jwplayer.flash.swf',\n                        primary: 'html5',\n                        playlist: vm.playlist,\n                        startparam: 'start',\n                        wmode: 'transparent',\n                        width: '100%',\n                        height: '100%',\n                        events: {\n                            onTime: onTime,\n                            onPlay: onPlay,\n                            onComplete: onComplete\n                        },\n                        autostart: true\n                    });\n                    vm.player = jwplayer(vm.elementId);\n                }\n            }\n\n            var startVideoWhereWeLeftOffProcessed = false;\n            /**\n             * Event that is called every time the video changes time position. This may be called up to \n             * 10 times a second\n             */\n            function onTime(obj) {\n                if (startVideoWhereWeLeftOffProcessed === false && obj.position > 0) {\n                    startVideoWhereWeLeftOffProcessed = true;\n                    startVideoWhereWeLeftOff();\n                    return;\n                }\n\n                var positionInSeconds = obj.position;\n                //every so often, update the database with the current video's play position\n                var nowTime = new Date();\n                var timeSinceLastUpdate = nowTime - playPositionUpdateTime;\n                if (timeSinceLastUpdate > 5000) {\n                    playPositionUpdateTime = new Date();\n                    Video.setProgress(vm.video.videoId, positionInSeconds);\n                }\n            }\n            \n            function onComplete(){\n                console.debug('Finished playing video ' + vm.video.videoId);\n                Video.setProgress(vm.video.videoId, -1, true);\n            }\n\n            /**\n             * Seeks to the playback position indicated by the database. This should only be called ONCE, \n             * and only after the video has started playing\n             */\n            function startVideoWhereWeLeftOff() {\n                //seek the player to the startPosition\n                //if a startSeconds value greater than 0 was provided, seek to that position in the video\n                if (startSeconds > 0) {\n                    vm.player.seek(startSeconds);\n                    console.debug('seeking to ', startSeconds);\n                }\n            }\n\n            /**\n             * Event that is fired every time the video starts playing\n             */\n            function onPlay() {\n                playPositionUpdateTime = new Date();\n            }\n\n        }\n    }]);","angular.module('app').directive('videoTile', [function() {\n        return {\n            restrict: 'E',\n            controllerAs: 'vm',\n            controller: [Controller],\n            bindToController: true,\n            scope: {\n                video: '='\n            },\n            templateUrl: 'videoTileDirective.html'\n        }\n\n        function Controller() {\n            \n        }\n    }]);","angular.module('app').service('admin', ['$http', '$q', '_', function($http, $q, _) {\n        return {\n            getServerVersionNumber: getServerVersionNumber,\n            updateApplication: updateApplication\n        };\n\n        /**\n         * Finds a poster and metadata for every video in the library that does not have one yet.\n         * @returns {$q@call;defer.promise}\n         */\n        function getServerVersionNumber() {\n            var deferred = $q.defer();\n            $http.get('api/GetServerVersionNumber.php')\n                    .success(function(result) {\n                        deferred.resolve(result);\n                    })\n                    .error(function() {\n                        deferred.reject();\n                    });\n            return deferred.promise;\n        }\n\n        /**\n         * Checks for updates to this application and updates if there are any.\n         * @returns {undefined}\n         */\n        function updateApplication() {\n            var deferred = $q.defer();\n            $http.get('api/Update.php')\n                    .success(function(result) {\n                        if (result.success === true) {\n                            deferred.resolve(result);\n                        } else {\n                            deferred.reject(result);\n                        }\n                    })\n                    .error(function(err) {\n                        deferred.reject(err);\n                    });\n            return deferred.promise;\n        }\n    }]);","angular.module('app').service('api', ['$q', '$http', function($q, $http) {\n        return {\n            generateLibrary: generateLibrary\n        };\n\n        function generateLibrary() {\n            return $q(function(resolve, reject) {\n                $http.get('api/GenerateLibrary.php')\n                        .success(function(result) {\n                            if (result.success) {\n                                resolve();\n                            } else {\n                                reject();\n                            }\n                        })\n                        .error(function() {\n                            reject();\n                        })\n\n            });\n        }\n    }]);","angular.module('app').service('globals', [function() {\n        return {\n            pageTitle: 'PlumMediaCenter',\n            hideNavbar: false,\n            infiniteScrollPageSize: 25,\n            //whenever the admin page launches a metadata fetch, keep track of its status here. \n            fetchMissingMetadataIsPending: false,\n            generateLibraryIsPending: false,\n            checkForUpdatesIsPending: false\n        };\n    }]);","angular.module('app').service('_', function(){\n    return window._;\n});","/**\n * Takes an image url and refreshes that image so that the browser cache can be refreshed\n * @param {type} param1\n * @param {type} param2\n */\nangular.module('app').service('refreshImage', ['$q', function($q) {\n        function refreshImage(uri) {\n            var deferred = $q.defer();\n            var reload = function() {\n                // Force a reload of the iframe\n                this.contentWindow.location.reload(true);\n\n                // Remove `load` event listener and remove iframe\n                this.removeEventListener('load', reload, false);\n                this.parentElement.removeChild(this);\n\n               deferred.resolve();\n            };\n\n            var iframe = document.createElement('iframe');\n            iframe.style.display = 'none';\n\n            // Reload iframe once it has loaded\n            iframe.addEventListener('load', reload, false);\n\n            // Only call callback if error occured while loading\n            iframe.addEventListener('error', deferred.reject, false);\n            iframe.src = uri;\n            document.body.appendChild(iframe);\n            return deferred.promise;\n        }\n\n        return refreshImage;\n    }]);","angular.module('app').service('uniqueId', [function() {\n        var counter = 0;\n        return function() {\n            counter++;\n            return 'element-' + counter;\n        }\n    }]);","angular.module('app').service('util', ['_', function(_) {\n        return {\n            blankItemInPlace: blankItemInPlace\n        };\n\n        function blankItemInPlace(item) {\n            if (_.isArray(item)) {\n                while (item.length > 0) {\n                    item.pop();\n                }\n            } else {\n                for (var i in item) {\n                    delete item[i];\n                }\n            }\n        }\n    }]);","angular.module('app').service('Video', ['$http', '$q', '_', function ($http, $q, _) {\n        function Video() {\n\n        }\n\n        Video.search = function (searchTerm) {\n            var deferred = $q.defer();\n            $http.get('api/GetSearchResults.php', {params: {q: searchTerm}}).success(function (data) {\n                deferred.resolve(data);\n            }).error(function () {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        Video.getAll = function () {\n            return $q(function (resolve, reject) {\n                $http.get('api/GetLibrary.php').success(function (data) {\n                    resolve(data);\n                });\n            });\n        };\n\n        Video.getById = function (id) {\n            var deferred = $q.defer();\n            if (!_.isNumber(id)) {\n                deferred.reject();\n            } else {\n                $http.get('api/GetVideo.php?videoId=' + id).success(function (data) {\n                    deferred.resolve(data);\n                }).error(function () {\n                    deferred.reject(data);\n                });\n            }\n            return deferred.promise;\n        };\n\n        Video.getEpisodes = function (showId) {\n            var deferred = $q.defer();\n            $http.get('api/GetTvEpisodes.php?videoId=' + showId).success(function (data) {\n                deferred.resolve(data);\n            }).error(function () {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        Video.getNextEpisode = function (showId) {\n            var deferred = $q.defer();\n            $http.get('api/GetNextEpisode.php?videoId=' + showId).success(function (data) {\n                deferred.resolve(data);\n            }).error(function () {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        /**\n         * Get how much percentage watched this video is\n         * @param {type} videoId\n         * @returns {$q@call;defer.promise}\n         */\n        Video.getProgressPercent = function (videoId) {\n            var deferred = $q.defer();\n            $http.get('api/GetVideoProgressPercent.php', {params: {videoId: videoId}})\n                    .success(function (result) {\n                        deferred.resolve(result.percent);\n                    })\n                    .error(deferred.reject);\n            return deferred.promise;\n        };\n\n        /**\n         * Get how much percentage watched each video is\n         * @param {type} videoId\n         * @returns {$q@call;defer.promise}\n         */\n        Video.getProgressPercentMultiple = function (videoIds) {\n            videoIds = _.isArray(videoIds) ? videoIds : [];\n            var deferred = $q.defer();\n            $http.get('api/GetVideoProgressPercentMultiple.php', {\n                params: {\n                    videoIds: videoIds.join(',')\n                }\n            }).success(function (result) {\n                deferred.resolve(result);\n            }).error(deferred.reject);\n            return deferred.promise;\n        };\n\n        /**\n         * Get the number of seconds into a video the current user is. \n         * @param {type} videoId\n         * @returns {$q@call;defer.promise}\n         */\n        Video.getProgress = function (videoId) {\n            var deferred = $q.defer();\n            $http.get('api/GetVideoProgress.php', {params: {\n                    videoId: videoId\n                }}).success(function (data) {\n                deferred.resolve(data.startSeconds);\n            }).error(function () {\n                deferred.reject();\n            });\n            return deferred.promise;\n        }\n\n        Video.setProgress = function (videoId, seconds, isFinished) {\n            isFinished = isFinished === true ? true : false;\n\n            var deferred = $q.defer();\n            $http.get('api/SetVideoProgress.php', {params: {\n                    videoId: videoId,\n                    seconds: seconds,\n                    finished: isFinished\n                }}).success(function (data) {\n                if (data.success) {\n                    deferred.resolve();\n                } else {\n                    deferred.reject();\n                }\n            }).error(function () {\n                deferred.reject();\n            });\n            return deferred.promise;\n        }\n\n        Video.getCounts = function () {\n            var deferred = $q.defer();\n            $http.get('api/GetVideoCounts.php').success(function (data) {\n                deferred.resolve(data);\n            }).error(function () {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        Video.fetchMetadata = function (videoId, onlineVideoId) {\n            var deferred = $q.defer();\n            $http.get('api/FetchVideoMetadata.php', {params: {videoId: videoId, onlineVideoId: onlineVideoId}}).success(function (data) {\n                deferred.resolve(data);\n            }).error(function () {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        Video.getMetadataSearchResultsByTitle = function (mediaType, title) {\n            var deferred = $q.defer();\n            $http.get('api/GetMetadataSearchResults.php', {\n                params: {\n                    mediaType: mediaType,\n                    title: title\n                }\n            }).success(function (data) {\n                deferred.resolve(data);\n            }).error(function () {\n                deferred.reject();\n            });\n            return deferred.promise;\n        }\n        Video.getMetadataSearchResultsByOnlineVideoId = function (mediaType, onlineVideoId) {\n            var deferred = $q.defer();\n            $http.get('api/GetMetadataSearchResults.php', {\n                params: {\n                    mediaType: mediaType,\n                    onlineVideoId: onlineVideoId\n                }\n            }).success(function (data) {\n                deferred.resolve(data);\n            }).error(function () {\n                deferred.reject();\n            });\n            return deferred.promise;\n        }\n\n        Video.getPathInfo = function (videoId) {\n            var deferred = $q.defer();\n            $http.get('api/GetVideoPathInfo.php?videoId=' + videoId)\n                    .success(function (video) {\n                        deferred.resolve(video);\n                    })\n                    .error(function () {\n                        deferred.reject();\n                    });\n            return deferred.promise;\n        }\n\n        Video.getShowFromEpisodeId = function (episodeId) {\n            var deferred = $q.defer();\n            $http.get('api/GetTvShowByEpisodeId.php?videoId=' + episodeId)\n                    .success(function (video) {\n                        deferred.resolve(video);\n                    })\n                    .error(function () {\n                        deferred.reject();\n                    });\n            return deferred.promise;\n        }\n\n        /**\n         * Finds a poster and metadata for every video in the library that does not have one yet.\n         * @returns {$q@call;defer.promise}\n         */\n        Video.fetchMissingMetadata = function () {\n            var deferred = $q.defer();\n            $http.get('api/FetchMissingMetadataAndPosters.php')\n                    .success(function (result) {\n                        deferred.resolve(result);\n                    })\n                    .error(function () {\n                        deferred.reject();\n                    });\n            return deferred.promise;\n        }\n\n        Video.addNewMediaItem = function (videoSourceId, newMediaItemPath) {\n            return $http.get('api/AddNewMediaItem.php', {params: {videoSourceId: videoSourceId, path: newMediaItemPath}}).success(function (result) {\n                return result;\n            }).error(function (error) {\n                return error;\n            });\n\n        };\n        return Video;\n    }]);","angular.module('app').service('VideoSource', ['$http', '$q', function($http, $q) {\n        function VideoSource() {\n\n        }\n\n        VideoSource.getAll = function() {\n            var deferred = $q.defer();\n            $http.get('api/GetVideoSources.php').success(function(data) {\n                deferred.resolve(data);\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        VideoSource.getById = function(id) {\n            var deferred = $q.defer();\n            $http.get('api/GetVideoSourceById.php?id=' + id).success(function(data) {\n                deferred.resolve(data);\n            }).error(function() {\n                deferred.reject();\n            });\n            return deferred.promise;\n        };\n\n        VideoSource.save = function(videoSource) {\n            return $q(function(resolve, reject) {\n                $http.post('api/PostVideoSource.php', videoSource).then(function(result) {\n                    resolve(result.data);\n                }, reject);\n            });\n        };\n\n        VideoSource.deleteById = function(id) {\n            return $q(function(resolve, reject) {\n                $http.delete('api/DeleteVideoSource.php', {data: {id: id}}).then(function(result) {\n                    resolve(result.data);\n                }, reject);\n            });\n        };\n\n        return VideoSource;\n    }]);","angular.module('app').directive('pathExistsValidator', ['$http', '$q', function($http, $q) {\n    return { \n        require: 'ngModel',\n        link: function(scope, element, attrs, ngModel) {\n            ngModel.$asyncValidators.pathExists = function(modelValue, viewValue) {\n                var value = modelValue || viewValue;\n                return $http.get('api/GetPathExistsOnServer.php', {params: {path: value}}).then(\n                        function(response) {\n                            if (!response.data.exists === true) {\n                                return $q.reject(response.data.errorMessage);\n                            }\n                            return true;\n                        }\n                );\n            };\n        }\n    };\n}]);","angular.module('app').directive('urlExistsValidator', ['$http', '$q', function ($http, $q) {\n        return {\n            require: 'ngModel',\n            link: function (scope, element, attrs, ngModel) {\n                ngModel.$asyncValidators.urlExists = function (modelValue, viewValue) {\n                    var value = modelValue || viewValue;\n                    return $http.get('api/GetUrlExists.php', {params: {url: value}}).then(function (response) {\n                        if (!response.data.exists === true) {\n                            return $q.reject(response.data.errorMessage);\n                        }\n                        return true;\n                    }, function(err){\n                    });\n                };\n            }\n        };\n    }]);"],"sourceRoot":"/source/"}